// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: lorenzo/plan/v1/plan.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export enum PlanStatus {
  Pause = 0,
  Unpause = 1,
  UNRECOGNIZED = -1,
}

export function planStatusFromJSON(object: any): PlanStatus {
  switch (object) {
    case 0:
    case "Pause":
      return PlanStatus.Pause;
    case 1:
    case "Unpause":
      return PlanStatus.Unpause;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlanStatus.UNRECOGNIZED;
  }
}

export function planStatusToJSON(object: PlanStatus): string {
  switch (object) {
    case PlanStatus.Pause:
      return "Pause";
    case PlanStatus.Unpause:
      return "Unpause";
    case PlanStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Plan defines the details of a project */
export interface Plan {
  id: Long;
  name: string;
  planDescUri: string;
  agentId: Long;
  planStartTime: Long;
  periodTime: Long;
  yatContractAddress: string;
  contractAddress: string;
  enabled: PlanStatus;
}

function createBasePlan(): Plan {
  return {
    id: Long.UZERO,
    name: "",
    planDescUri: "",
    agentId: Long.UZERO,
    planStartTime: Long.UZERO,
    periodTime: Long.UZERO,
    yatContractAddress: "",
    contractAddress: "",
    enabled: 0,
  };
}

export const Plan = {
  encode(message: Plan, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.planDescUri !== "") {
      writer.uint32(26).string(message.planDescUri);
    }
    if (!message.agentId.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.agentId);
    }
    if (!message.planStartTime.equals(Long.UZERO)) {
      writer.uint32(40).uint64(message.planStartTime);
    }
    if (!message.periodTime.equals(Long.UZERO)) {
      writer.uint32(48).uint64(message.periodTime);
    }
    if (message.yatContractAddress !== "") {
      writer.uint32(58).string(message.yatContractAddress);
    }
    if (message.contractAddress !== "") {
      writer.uint32(66).string(message.contractAddress);
    }
    if (message.enabled !== 0) {
      writer.uint32(72).int32(message.enabled);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Plan {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.planDescUri = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.agentId = reader.uint64() as Long;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.planStartTime = reader.uint64() as Long;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.periodTime = reader.uint64() as Long;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.yatContractAddress = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.enabled = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Plan {
    return {
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      planDescUri: isSet(object.planDescUri) ? globalThis.String(object.planDescUri) : "",
      agentId: isSet(object.agentId) ? Long.fromValue(object.agentId) : Long.UZERO,
      planStartTime: isSet(object.planStartTime) ? Long.fromValue(object.planStartTime) : Long.UZERO,
      periodTime: isSet(object.periodTime) ? Long.fromValue(object.periodTime) : Long.UZERO,
      yatContractAddress: isSet(object.yatContractAddress) ? globalThis.String(object.yatContractAddress) : "",
      contractAddress: isSet(object.contractAddress) ? globalThis.String(object.contractAddress) : "",
      enabled: isSet(object.enabled) ? planStatusFromJSON(object.enabled) : 0,
    };
  },

  toJSON(message: Plan): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.planDescUri !== "") {
      obj.planDescUri = message.planDescUri;
    }
    if (!message.agentId.equals(Long.UZERO)) {
      obj.agentId = (message.agentId || Long.UZERO).toString();
    }
    if (!message.planStartTime.equals(Long.UZERO)) {
      obj.planStartTime = (message.planStartTime || Long.UZERO).toString();
    }
    if (!message.periodTime.equals(Long.UZERO)) {
      obj.periodTime = (message.periodTime || Long.UZERO).toString();
    }
    if (message.yatContractAddress !== "") {
      obj.yatContractAddress = message.yatContractAddress;
    }
    if (message.contractAddress !== "") {
      obj.contractAddress = message.contractAddress;
    }
    if (message.enabled !== 0) {
      obj.enabled = planStatusToJSON(message.enabled);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Plan>, I>>(base?: I): Plan {
    return Plan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Plan>, I>>(object: I): Plan {
    const message = createBasePlan();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    message.name = object.name ?? "";
    message.planDescUri = object.planDescUri ?? "";
    message.agentId = (object.agentId !== undefined && object.agentId !== null)
      ? Long.fromValue(object.agentId)
      : Long.UZERO;
    message.planStartTime = (object.planStartTime !== undefined && object.planStartTime !== null)
      ? Long.fromValue(object.planStartTime)
      : Long.UZERO;
    message.periodTime = (object.periodTime !== undefined && object.periodTime !== null)
      ? Long.fromValue(object.periodTime)
      : Long.UZERO;
    message.yatContractAddress = object.yatContractAddress ?? "";
    message.contractAddress = object.contractAddress ?? "";
    message.enabled = object.enabled ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
