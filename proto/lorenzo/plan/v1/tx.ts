// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: lorenzo/plan/v1/tx.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params } from "./params";
import { PlanStatus, planStatusFromJSON, planStatusToJSON } from "./plan";

/** MsgUpdateParams is the request type for the Msg/UpdateParams RPC method. */
export interface MsgUpdateParams {
  /**
   * authority is the address of the governance account.
   * just FYI: cosmos.AddressString marks that this field should use type alias
   * for AddressString instead of string, but the functionality is not yet
   * implemented in cosmos-proto
   */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params?: Params | undefined;
}

/**
 * MsgUpdateParamsResponse is the response type for the Msg/UpdateParams RPC
 * method.
 */
export interface MsgUpdateParamsResponse {
}

/** MsgUpgradePlan is the request type for the Msg/UpgradePlan RPC method. */
export interface MsgUpgradePlan {
  /** implementation is the new yat logic contract address */
  implementation: string;
  /**
   * authority is the address of the governance account.
   * just FYI: cosmos.AddressString marks that this field should use type alias
   * for AddressString instead of string, but the functionality is not yet
   * implemented in cosmos-proto
   */
  authority: string;
}

/** MsgUpgradeYATResponse is the response type for the Msg/UpgradeYAT RPC method. */
export interface MsgUpgradePlanResponse {
}

/** MsgCreatePlan is the request type for the Msg/CreatePlan RPC method. */
export interface MsgCreatePlan {
  /** name is the name of the plan */
  name: string;
  /** plan_desc_uri is the URI of the plan description */
  planDescUri: string;
  /** agent_id is the unique identifier of the agent */
  agentId: Long;
  /** plan_start_time is the start time of the plan */
  planStartTime: Long;
  /** period_time is the period time of the plan */
  periodTime: Long;
  /** yat_contract_address is the address of the yat contract */
  yatContractAddress: string;
  /** sender is the address of the allowed sender */
  sender: string;
}

/** MsgCreatePlanResponse is the response type for the Msg/CreatePlan RPC method. */
export interface MsgCreatePlanResponse {
  /** id is the unique identifier of the plan */
  id: Long;
}

/** MsgSetMerkleRoot is the request type for the Msg/SetMerkleRoot RPC method. */
export interface MsgSetMerkleRoot {
  /** plan_id is the unique identifier of the plan */
  planId: Long;
  /** round_id is the unique identifier of the round */
  roundId: string;
  /** merkle_root is the merkle root of the plan */
  merkleRoot: string;
  /** sender is the address of the allowed sender */
  sender: string;
}

/**
 * MsgSetMerkleRootResponse is the response type for the Msg/SetMerkleRoot RPC
 * method.
 */
export interface MsgSetMerkleRootResponse {
}

/** MsgClaims is the request type for the Msg/Claims RPC method. */
export interface MsgClaims {
  /** plan_id is the unique identifier of the plan */
  planId: Long;
  /** receiver is the address of the receiver */
  receiver: string;
  /** round_id is the unique identifier of the round */
  roundId: string;
  /** amount is the amount of the claim */
  amount: string;
  /** merkle_proof is the merkle proof of the claim */
  merkleProof: string;
  /** sender is the address of the governance account or module admin */
  sender: string;
}

/** MsgClaimsResponse is the response type for the Msg/Claims RPC method. */
export interface MsgClaimsResponse {
}

/**
 * MsgUpdatePlanStatus is the request type for the Msg/UpdatePlanStatus RPC
 * method.
 */
export interface MsgUpdatePlanStatus {
  /** plan_id is the unique identifier of the plan */
  planId: Long;
  /** status is the status of the plan */
  status: PlanStatus;
  /** sender is the address of the allowed sender */
  sender: string;
}

/**
 * MsgUpdatePlanStatusResponse is the response type for the Msg/UpdatePlanStatus
 * RPC method.
 */
export interface MsgUpdatePlanStatusResponse {
}

/** MsgCreateYAT is the request type for the Msg/CreateYAT RPC method. */
export interface MsgCreateYAT {
  /** name is the name of the yat contract */
  name: string;
  /** symbol is the symbol of the yat contract */
  symbol: string;
  /** sender is the address of the allowed sender */
  sender: string;
}

/** MsgCreateYATResponse is the response type for the Msg/CreateYAT RPC method. */
export interface MsgCreateYATResponse {
  /** contract_address is the address of the yat contract */
  contractAddress: string;
}

/** MsgSetMinter is the request type for the Msg/SetMinter RPC method. */
export interface MsgSetMinter {
  /** minter is the address of the minter */
  minter: string;
  /** contract_address is the address of the yat contract */
  contractAddress: string;
  /** sender is the address of the allowed sender */
  sender: string;
}

/** MsgSetMinterResponse is the response type for the Msg/SetMinter RPC method. */
export interface MsgSetMinterResponse {
}

/** MsgRemoveMinter is the request type for the Msg/RemoveMinter RPC method. */
export interface MsgRemoveMinter {
  /** minter is the address of the minter */
  minter: string;
  /** contract_address is the address of the yat contract */
  contractAddress: string;
  /** sender is the address of the allowed sender */
  sender: string;
}

/**
 * MsgRemoveMinterResponse is the response type for the Msg/RemoveMinter RPC
 * method.
 */
export interface MsgRemoveMinterResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams = {
  encode(message: MsgUpdateParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse = {
  encode(_: MsgUpdateParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgUpgradePlan(): MsgUpgradePlan {
  return { implementation: "", authority: "" };
}

export const MsgUpgradePlan = {
  encode(message: MsgUpgradePlan, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.implementation !== "") {
      writer.uint32(10).string(message.implementation);
    }
    if (message.authority !== "") {
      writer.uint32(18).string(message.authority);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpgradePlan {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpgradePlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.implementation = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.authority = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpgradePlan {
    return {
      implementation: isSet(object.implementation) ? globalThis.String(object.implementation) : "",
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
    };
  },

  toJSON(message: MsgUpgradePlan): unknown {
    const obj: any = {};
    if (message.implementation !== "") {
      obj.implementation = message.implementation;
    }
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpgradePlan>, I>>(base?: I): MsgUpgradePlan {
    return MsgUpgradePlan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpgradePlan>, I>>(object: I): MsgUpgradePlan {
    const message = createBaseMsgUpgradePlan();
    message.implementation = object.implementation ?? "";
    message.authority = object.authority ?? "";
    return message;
  },
};

function createBaseMsgUpgradePlanResponse(): MsgUpgradePlanResponse {
  return {};
}

export const MsgUpgradePlanResponse = {
  encode(_: MsgUpgradePlanResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpgradePlanResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpgradePlanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpgradePlanResponse {
    return {};
  },

  toJSON(_: MsgUpgradePlanResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpgradePlanResponse>, I>>(base?: I): MsgUpgradePlanResponse {
    return MsgUpgradePlanResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpgradePlanResponse>, I>>(_: I): MsgUpgradePlanResponse {
    const message = createBaseMsgUpgradePlanResponse();
    return message;
  },
};

function createBaseMsgCreatePlan(): MsgCreatePlan {
  return {
    name: "",
    planDescUri: "",
    agentId: Long.UZERO,
    planStartTime: Long.UZERO,
    periodTime: Long.UZERO,
    yatContractAddress: "",
    sender: "",
  };
}

export const MsgCreatePlan = {
  encode(message: MsgCreatePlan, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.planDescUri !== "") {
      writer.uint32(18).string(message.planDescUri);
    }
    if (!message.agentId.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.agentId);
    }
    if (!message.planStartTime.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.planStartTime);
    }
    if (!message.periodTime.equals(Long.UZERO)) {
      writer.uint32(40).uint64(message.periodTime);
    }
    if (message.yatContractAddress !== "") {
      writer.uint32(50).string(message.yatContractAddress);
    }
    if (message.sender !== "") {
      writer.uint32(58).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreatePlan {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.planDescUri = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.agentId = reader.uint64() as Long;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.planStartTime = reader.uint64() as Long;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.periodTime = reader.uint64() as Long;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.yatContractAddress = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreatePlan {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      planDescUri: isSet(object.planDescUri) ? globalThis.String(object.planDescUri) : "",
      agentId: isSet(object.agentId) ? Long.fromValue(object.agentId) : Long.UZERO,
      planStartTime: isSet(object.planStartTime) ? Long.fromValue(object.planStartTime) : Long.UZERO,
      periodTime: isSet(object.periodTime) ? Long.fromValue(object.periodTime) : Long.UZERO,
      yatContractAddress: isSet(object.yatContractAddress) ? globalThis.String(object.yatContractAddress) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgCreatePlan): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.planDescUri !== "") {
      obj.planDescUri = message.planDescUri;
    }
    if (!message.agentId.equals(Long.UZERO)) {
      obj.agentId = (message.agentId || Long.UZERO).toString();
    }
    if (!message.planStartTime.equals(Long.UZERO)) {
      obj.planStartTime = (message.planStartTime || Long.UZERO).toString();
    }
    if (!message.periodTime.equals(Long.UZERO)) {
      obj.periodTime = (message.periodTime || Long.UZERO).toString();
    }
    if (message.yatContractAddress !== "") {
      obj.yatContractAddress = message.yatContractAddress;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreatePlan>, I>>(base?: I): MsgCreatePlan {
    return MsgCreatePlan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreatePlan>, I>>(object: I): MsgCreatePlan {
    const message = createBaseMsgCreatePlan();
    message.name = object.name ?? "";
    message.planDescUri = object.planDescUri ?? "";
    message.agentId = (object.agentId !== undefined && object.agentId !== null)
      ? Long.fromValue(object.agentId)
      : Long.UZERO;
    message.planStartTime = (object.planStartTime !== undefined && object.planStartTime !== null)
      ? Long.fromValue(object.planStartTime)
      : Long.UZERO;
    message.periodTime = (object.periodTime !== undefined && object.periodTime !== null)
      ? Long.fromValue(object.periodTime)
      : Long.UZERO;
    message.yatContractAddress = object.yatContractAddress ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgCreatePlanResponse(): MsgCreatePlanResponse {
  return { id: Long.UZERO };
}

export const MsgCreatePlanResponse = {
  encode(message: MsgCreatePlanResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.id.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreatePlanResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePlanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreatePlanResponse {
    return { id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO };
  },

  toJSON(message: MsgCreatePlanResponse): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.UZERO)) {
      obj.id = (message.id || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreatePlanResponse>, I>>(base?: I): MsgCreatePlanResponse {
    return MsgCreatePlanResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreatePlanResponse>, I>>(object: I): MsgCreatePlanResponse {
    const message = createBaseMsgCreatePlanResponse();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  },
};

function createBaseMsgSetMerkleRoot(): MsgSetMerkleRoot {
  return { planId: Long.UZERO, roundId: "", merkleRoot: "", sender: "" };
}

export const MsgSetMerkleRoot = {
  encode(message: MsgSetMerkleRoot, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.planId.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.planId);
    }
    if (message.roundId !== "") {
      writer.uint32(18).string(message.roundId);
    }
    if (message.merkleRoot !== "") {
      writer.uint32(26).string(message.merkleRoot);
    }
    if (message.sender !== "") {
      writer.uint32(34).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetMerkleRoot {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetMerkleRoot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.planId = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roundId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.merkleRoot = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetMerkleRoot {
    return {
      planId: isSet(object.planId) ? Long.fromValue(object.planId) : Long.UZERO,
      roundId: isSet(object.roundId) ? globalThis.String(object.roundId) : "",
      merkleRoot: isSet(object.merkleRoot) ? globalThis.String(object.merkleRoot) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgSetMerkleRoot): unknown {
    const obj: any = {};
    if (!message.planId.equals(Long.UZERO)) {
      obj.planId = (message.planId || Long.UZERO).toString();
    }
    if (message.roundId !== "") {
      obj.roundId = message.roundId;
    }
    if (message.merkleRoot !== "") {
      obj.merkleRoot = message.merkleRoot;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetMerkleRoot>, I>>(base?: I): MsgSetMerkleRoot {
    return MsgSetMerkleRoot.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetMerkleRoot>, I>>(object: I): MsgSetMerkleRoot {
    const message = createBaseMsgSetMerkleRoot();
    message.planId = (object.planId !== undefined && object.planId !== null)
      ? Long.fromValue(object.planId)
      : Long.UZERO;
    message.roundId = object.roundId ?? "";
    message.merkleRoot = object.merkleRoot ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgSetMerkleRootResponse(): MsgSetMerkleRootResponse {
  return {};
}

export const MsgSetMerkleRootResponse = {
  encode(_: MsgSetMerkleRootResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetMerkleRootResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetMerkleRootResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetMerkleRootResponse {
    return {};
  },

  toJSON(_: MsgSetMerkleRootResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetMerkleRootResponse>, I>>(base?: I): MsgSetMerkleRootResponse {
    return MsgSetMerkleRootResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetMerkleRootResponse>, I>>(_: I): MsgSetMerkleRootResponse {
    const message = createBaseMsgSetMerkleRootResponse();
    return message;
  },
};

function createBaseMsgClaims(): MsgClaims {
  return { planId: Long.UZERO, receiver: "", roundId: "", amount: "", merkleProof: "", sender: "" };
}

export const MsgClaims = {
  encode(message: MsgClaims, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.planId.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.planId);
    }
    if (message.receiver !== "") {
      writer.uint32(18).string(message.receiver);
    }
    if (message.roundId !== "") {
      writer.uint32(26).string(message.roundId);
    }
    if (message.amount !== "") {
      writer.uint32(34).string(message.amount);
    }
    if (message.merkleProof !== "") {
      writer.uint32(42).string(message.merkleProof);
    }
    if (message.sender !== "") {
      writer.uint32(50).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgClaims {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaims();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.planId = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.receiver = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.roundId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.amount = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.merkleProof = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgClaims {
    return {
      planId: isSet(object.planId) ? Long.fromValue(object.planId) : Long.UZERO,
      receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
      roundId: isSet(object.roundId) ? globalThis.String(object.roundId) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      merkleProof: isSet(object.merkleProof) ? globalThis.String(object.merkleProof) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgClaims): unknown {
    const obj: any = {};
    if (!message.planId.equals(Long.UZERO)) {
      obj.planId = (message.planId || Long.UZERO).toString();
    }
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    if (message.roundId !== "") {
      obj.roundId = message.roundId;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.merkleProof !== "") {
      obj.merkleProof = message.merkleProof;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgClaims>, I>>(base?: I): MsgClaims {
    return MsgClaims.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgClaims>, I>>(object: I): MsgClaims {
    const message = createBaseMsgClaims();
    message.planId = (object.planId !== undefined && object.planId !== null)
      ? Long.fromValue(object.planId)
      : Long.UZERO;
    message.receiver = object.receiver ?? "";
    message.roundId = object.roundId ?? "";
    message.amount = object.amount ?? "";
    message.merkleProof = object.merkleProof ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgClaimsResponse(): MsgClaimsResponse {
  return {};
}

export const MsgClaimsResponse = {
  encode(_: MsgClaimsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgClaimsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaimsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgClaimsResponse {
    return {};
  },

  toJSON(_: MsgClaimsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgClaimsResponse>, I>>(base?: I): MsgClaimsResponse {
    return MsgClaimsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgClaimsResponse>, I>>(_: I): MsgClaimsResponse {
    const message = createBaseMsgClaimsResponse();
    return message;
  },
};

function createBaseMsgUpdatePlanStatus(): MsgUpdatePlanStatus {
  return { planId: Long.UZERO, status: 0, sender: "" };
}

export const MsgUpdatePlanStatus = {
  encode(message: MsgUpdatePlanStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.planId.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.planId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdatePlanStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdatePlanStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.planId = reader.uint64() as Long;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdatePlanStatus {
    return {
      planId: isSet(object.planId) ? Long.fromValue(object.planId) : Long.UZERO,
      status: isSet(object.status) ? planStatusFromJSON(object.status) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgUpdatePlanStatus): unknown {
    const obj: any = {};
    if (!message.planId.equals(Long.UZERO)) {
      obj.planId = (message.planId || Long.UZERO).toString();
    }
    if (message.status !== 0) {
      obj.status = planStatusToJSON(message.status);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdatePlanStatus>, I>>(base?: I): MsgUpdatePlanStatus {
    return MsgUpdatePlanStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdatePlanStatus>, I>>(object: I): MsgUpdatePlanStatus {
    const message = createBaseMsgUpdatePlanStatus();
    message.planId = (object.planId !== undefined && object.planId !== null)
      ? Long.fromValue(object.planId)
      : Long.UZERO;
    message.status = object.status ?? 0;
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgUpdatePlanStatusResponse(): MsgUpdatePlanStatusResponse {
  return {};
}

export const MsgUpdatePlanStatusResponse = {
  encode(_: MsgUpdatePlanStatusResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdatePlanStatusResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdatePlanStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdatePlanStatusResponse {
    return {};
  },

  toJSON(_: MsgUpdatePlanStatusResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdatePlanStatusResponse>, I>>(base?: I): MsgUpdatePlanStatusResponse {
    return MsgUpdatePlanStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdatePlanStatusResponse>, I>>(_: I): MsgUpdatePlanStatusResponse {
    const message = createBaseMsgUpdatePlanStatusResponse();
    return message;
  },
};

function createBaseMsgCreateYAT(): MsgCreateYAT {
  return { name: "", symbol: "", sender: "" };
}

export const MsgCreateYAT = {
  encode(message: MsgCreateYAT, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.symbol !== "") {
      writer.uint32(18).string(message.symbol);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateYAT {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateYAT();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.symbol = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateYAT {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgCreateYAT): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateYAT>, I>>(base?: I): MsgCreateYAT {
    return MsgCreateYAT.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateYAT>, I>>(object: I): MsgCreateYAT {
    const message = createBaseMsgCreateYAT();
    message.name = object.name ?? "";
    message.symbol = object.symbol ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgCreateYATResponse(): MsgCreateYATResponse {
  return { contractAddress: "" };
}

export const MsgCreateYATResponse = {
  encode(message: MsgCreateYATResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contractAddress !== "") {
      writer.uint32(10).string(message.contractAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateYATResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateYATResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateYATResponse {
    return { contractAddress: isSet(object.contractAddress) ? globalThis.String(object.contractAddress) : "" };
  },

  toJSON(message: MsgCreateYATResponse): unknown {
    const obj: any = {};
    if (message.contractAddress !== "") {
      obj.contractAddress = message.contractAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateYATResponse>, I>>(base?: I): MsgCreateYATResponse {
    return MsgCreateYATResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateYATResponse>, I>>(object: I): MsgCreateYATResponse {
    const message = createBaseMsgCreateYATResponse();
    message.contractAddress = object.contractAddress ?? "";
    return message;
  },
};

function createBaseMsgSetMinter(): MsgSetMinter {
  return { minter: "", contractAddress: "", sender: "" };
}

export const MsgSetMinter = {
  encode(message: MsgSetMinter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.minter !== "") {
      writer.uint32(10).string(message.minter);
    }
    if (message.contractAddress !== "") {
      writer.uint32(18).string(message.contractAddress);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetMinter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetMinter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.minter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetMinter {
    return {
      minter: isSet(object.minter) ? globalThis.String(object.minter) : "",
      contractAddress: isSet(object.contractAddress) ? globalThis.String(object.contractAddress) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgSetMinter): unknown {
    const obj: any = {};
    if (message.minter !== "") {
      obj.minter = message.minter;
    }
    if (message.contractAddress !== "") {
      obj.contractAddress = message.contractAddress;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetMinter>, I>>(base?: I): MsgSetMinter {
    return MsgSetMinter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetMinter>, I>>(object: I): MsgSetMinter {
    const message = createBaseMsgSetMinter();
    message.minter = object.minter ?? "";
    message.contractAddress = object.contractAddress ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgSetMinterResponse(): MsgSetMinterResponse {
  return {};
}

export const MsgSetMinterResponse = {
  encode(_: MsgSetMinterResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetMinterResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetMinterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetMinterResponse {
    return {};
  },

  toJSON(_: MsgSetMinterResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetMinterResponse>, I>>(base?: I): MsgSetMinterResponse {
    return MsgSetMinterResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetMinterResponse>, I>>(_: I): MsgSetMinterResponse {
    const message = createBaseMsgSetMinterResponse();
    return message;
  },
};

function createBaseMsgRemoveMinter(): MsgRemoveMinter {
  return { minter: "", contractAddress: "", sender: "" };
}

export const MsgRemoveMinter = {
  encode(message: MsgRemoveMinter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.minter !== "") {
      writer.uint32(10).string(message.minter);
    }
    if (message.contractAddress !== "") {
      writer.uint32(18).string(message.contractAddress);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveMinter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveMinter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.minter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveMinter {
    return {
      minter: isSet(object.minter) ? globalThis.String(object.minter) : "",
      contractAddress: isSet(object.contractAddress) ? globalThis.String(object.contractAddress) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgRemoveMinter): unknown {
    const obj: any = {};
    if (message.minter !== "") {
      obj.minter = message.minter;
    }
    if (message.contractAddress !== "") {
      obj.contractAddress = message.contractAddress;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveMinter>, I>>(base?: I): MsgRemoveMinter {
    return MsgRemoveMinter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveMinter>, I>>(object: I): MsgRemoveMinter {
    const message = createBaseMsgRemoveMinter();
    message.minter = object.minter ?? "";
    message.contractAddress = object.contractAddress ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgRemoveMinterResponse(): MsgRemoveMinterResponse {
  return {};
}

export const MsgRemoveMinterResponse = {
  encode(_: MsgRemoveMinterResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveMinterResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveMinterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveMinterResponse {
    return {};
  },

  toJSON(_: MsgRemoveMinterResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveMinterResponse>, I>>(base?: I): MsgRemoveMinterResponse {
    return MsgRemoveMinterResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveMinterResponse>, I>>(_: I): MsgRemoveMinterResponse {
    const message = createBaseMsgRemoveMinterResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /** UpdateParams defines a method for updating the plan parameters. */
  UpdateParams(request: DeepPartial<MsgUpdateParams>, metadata?: grpc.Metadata): Promise<MsgUpdateParamsResponse>;
  /** UpgradePlan defines a governance operation for upgrading an Plan contract */
  UpgradePlan(request: DeepPartial<MsgUpgradePlan>, metadata?: grpc.Metadata): Promise<MsgUpgradePlanResponse>;
  /** CreatePlan defines a method for creating a new plan. */
  CreatePlan(request: DeepPartial<MsgCreatePlan>, metadata?: grpc.Metadata): Promise<MsgCreatePlanResponse>;
  /** SetMerkleRoot defines a method for setting the merkle root of the plan. */
  SetMerkleRoot(request: DeepPartial<MsgSetMerkleRoot>, metadata?: grpc.Metadata): Promise<MsgSetMerkleRootResponse>;
  /** CreateClaim defines a method for claims rewards to sender. */
  Claims(request: DeepPartial<MsgClaims>, metadata?: grpc.Metadata): Promise<MsgClaimsResponse>;
  /** UpdatePlanStatus defines a method for updating the plan status. */
  UpdatePlanStatus(
    request: DeepPartial<MsgUpdatePlanStatus>,
    metadata?: grpc.Metadata,
  ): Promise<MsgUpdatePlanStatusResponse>;
  /** CreateYAT defines a method for creating a new YAT contract. */
  CreateYAT(request: DeepPartial<MsgCreateYAT>, metadata?: grpc.Metadata): Promise<MsgCreateYATResponse>;
  /** SetMinter defines a method for setting minter of the YAT contract. */
  SetMinter(request: DeepPartial<MsgSetMinter>, metadata?: grpc.Metadata): Promise<MsgSetMinterResponse>;
  /** RemoveMinter defines a method for removing minter of the YAT contract. */
  RemoveMinter(request: DeepPartial<MsgRemoveMinter>, metadata?: grpc.Metadata): Promise<MsgRemoveMinterResponse>;
}

export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.UpgradePlan = this.UpgradePlan.bind(this);
    this.CreatePlan = this.CreatePlan.bind(this);
    this.SetMerkleRoot = this.SetMerkleRoot.bind(this);
    this.Claims = this.Claims.bind(this);
    this.UpdatePlanStatus = this.UpdatePlanStatus.bind(this);
    this.CreateYAT = this.CreateYAT.bind(this);
    this.SetMinter = this.SetMinter.bind(this);
    this.RemoveMinter = this.RemoveMinter.bind(this);
  }

  UpdateParams(request: DeepPartial<MsgUpdateParams>, metadata?: grpc.Metadata): Promise<MsgUpdateParamsResponse> {
    return this.rpc.unary(MsgUpdateParamsDesc, MsgUpdateParams.fromPartial(request), metadata);
  }

  UpgradePlan(request: DeepPartial<MsgUpgradePlan>, metadata?: grpc.Metadata): Promise<MsgUpgradePlanResponse> {
    return this.rpc.unary(MsgUpgradePlanDesc, MsgUpgradePlan.fromPartial(request), metadata);
  }

  CreatePlan(request: DeepPartial<MsgCreatePlan>, metadata?: grpc.Metadata): Promise<MsgCreatePlanResponse> {
    return this.rpc.unary(MsgCreatePlanDesc, MsgCreatePlan.fromPartial(request), metadata);
  }

  SetMerkleRoot(request: DeepPartial<MsgSetMerkleRoot>, metadata?: grpc.Metadata): Promise<MsgSetMerkleRootResponse> {
    return this.rpc.unary(MsgSetMerkleRootDesc, MsgSetMerkleRoot.fromPartial(request), metadata);
  }

  Claims(request: DeepPartial<MsgClaims>, metadata?: grpc.Metadata): Promise<MsgClaimsResponse> {
    return this.rpc.unary(MsgClaimsDesc, MsgClaims.fromPartial(request), metadata);
  }

  UpdatePlanStatus(
    request: DeepPartial<MsgUpdatePlanStatus>,
    metadata?: grpc.Metadata,
  ): Promise<MsgUpdatePlanStatusResponse> {
    return this.rpc.unary(MsgUpdatePlanStatusDesc, MsgUpdatePlanStatus.fromPartial(request), metadata);
  }

  CreateYAT(request: DeepPartial<MsgCreateYAT>, metadata?: grpc.Metadata): Promise<MsgCreateYATResponse> {
    return this.rpc.unary(MsgCreateYATDesc, MsgCreateYAT.fromPartial(request), metadata);
  }

  SetMinter(request: DeepPartial<MsgSetMinter>, metadata?: grpc.Metadata): Promise<MsgSetMinterResponse> {
    return this.rpc.unary(MsgSetMinterDesc, MsgSetMinter.fromPartial(request), metadata);
  }

  RemoveMinter(request: DeepPartial<MsgRemoveMinter>, metadata?: grpc.Metadata): Promise<MsgRemoveMinterResponse> {
    return this.rpc.unary(MsgRemoveMinterDesc, MsgRemoveMinter.fromPartial(request), metadata);
  }
}

export const MsgDesc = { serviceName: "lorenzo.plan.v1.Msg" };

export const MsgUpdateParamsDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateParams",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgUpdateParams.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgUpdateParamsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgUpgradePlanDesc: UnaryMethodDefinitionish = {
  methodName: "UpgradePlan",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgUpgradePlan.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgUpgradePlanResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgCreatePlanDesc: UnaryMethodDefinitionish = {
  methodName: "CreatePlan",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgCreatePlan.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgCreatePlanResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgSetMerkleRootDesc: UnaryMethodDefinitionish = {
  methodName: "SetMerkleRoot",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgSetMerkleRoot.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgSetMerkleRootResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgClaimsDesc: UnaryMethodDefinitionish = {
  methodName: "Claims",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgClaims.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgClaimsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgUpdatePlanStatusDesc: UnaryMethodDefinitionish = {
  methodName: "UpdatePlanStatus",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgUpdatePlanStatus.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgUpdatePlanStatusResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgCreateYATDesc: UnaryMethodDefinitionish = {
  methodName: "CreateYAT",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgCreateYAT.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgCreateYATResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgSetMinterDesc: UnaryMethodDefinitionish = {
  methodName: "SetMinter",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgSetMinter.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgSetMinterResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgRemoveMinterDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveMinter",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgRemoveMinter.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgRemoveMinterResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
