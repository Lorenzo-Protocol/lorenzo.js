// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: lorenzo/token/v1/token.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

/**
 * Source defines the source type of token asset, if source is:
 * - module: token origin is sdk module;
 * - contract: token origin is erc20 contract;
 */
export enum Source {
  /** OWNER_UNDEFINED - undefined source */
  OWNER_UNDEFINED = 0,
  /** OWNER_MODULE - token source is module */
  OWNER_MODULE = 1,
  /** OWNER_CONTRACT - token source is erc20 contract */
  OWNER_CONTRACT = 2,
  UNRECOGNIZED = -1,
}

export function sourceFromJSON(object: any): Source {
  switch (object) {
    case 0:
    case "OWNER_UNDEFINED":
      return Source.OWNER_UNDEFINED;
    case 1:
    case "OWNER_MODULE":
      return Source.OWNER_MODULE;
    case 2:
    case "OWNER_CONTRACT":
      return Source.OWNER_CONTRACT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Source.UNRECOGNIZED;
  }
}

export function sourceToJSON(object: Source): string {
  switch (object) {
    case Source.OWNER_UNDEFINED:
      return "OWNER_UNDEFINED";
    case Source.OWNER_MODULE:
      return "OWNER_MODULE";
    case Source.OWNER_CONTRACT:
      return "OWNER_CONTRACT";
    case Source.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** TokenPair defines a pairing of a cosmos coin and an erc20 token */
export interface TokenPair {
  /** erc20 contract hex format address */
  contract_address: string;
  /** sdk coin base denomination */
  denom: string;
  /** allows for token conversion */
  enabled: boolean;
  /** source of token asset */
  source: Source;
}

function createBaseTokenPair(): TokenPair {
  return { contract_address: "", denom: "", enabled: false, source: 0 };
}

export const TokenPair = {
  encode(message: TokenPair, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.enabled !== false) {
      writer.uint32(24).bool(message.enabled);
    }
    if (message.source !== 0) {
      writer.uint32(32).int32(message.source);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TokenPair {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenPair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.source = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenPair {
    return {
      contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      source: isSet(object.source) ? sourceFromJSON(object.source) : 0,
    };
  },

  toJSON(message: TokenPair): unknown {
    const obj: any = {};
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.source !== 0) {
      obj.source = sourceToJSON(message.source);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TokenPair>, I>>(base?: I): TokenPair {
    return TokenPair.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TokenPair>, I>>(object: I): TokenPair {
    const message = createBaseTokenPair();
    message.contract_address = object.contract_address ?? "";
    message.denom = object.denom ?? "";
    message.enabled = object.enabled ?? false;
    message.source = object.source ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
