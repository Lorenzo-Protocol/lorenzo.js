// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: lorenzo/token/v1/tx.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Metadata } from "../../../cosmos/bank/v1beta1/bank";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Params } from "./genesis";

/**
 * MsgRegisterCoin registers a token pair for existing coin
 * NOTE: this is a governance message.
 */
export interface MsgRegisterCoin {
  /** authority is the address that can update the parameters */
  authority: string;
  /** metadata slice of coins */
  metadata: Metadata[];
}

export interface MsgRegisterCoinResponse {
}

/**
 * MsgRegisterERC20 registers a token pair for existing erc20 contract
 * NOTE: this is a governance message.
 */
export interface MsgRegisterERC20 {
  /** authority is the address that can update the parameters */
  authority: string;
  /** metadata slice of erc20 token contract addresses */
  contract_addresses: string[];
}

export interface MsgRegisterERC20Response {
}

/**
 * MsgToggleConversion toggles the conversion for a token pair
 * NOTE: this is a governance message.
 */
export interface MsgToggleConversion {
  /** authority is the address that can update the parameters */
  authority: string;
  /** token is in format of either coin base denom or erc20 contract address */
  token: string;
}

export interface MsgToggleConversionResponse {
}

/** MsgConvertCoin converts a coin to an ERC20 token */
export interface MsgConvertCoin {
  /** coin to be converted */
  coin?:
    | Coin
    | undefined;
  /** receiver of the erc20 token, evm hex format address. */
  receiver: string;
  /** sender of the coin, lorenzo bech32 format address. */
  sender: string;
}

export interface MsgConvertCoinResponse {
}

/** MsgConvertERC20 converts an ERC20 token to a coin */
export interface MsgConvertERC20 {
  /** contract address of the ERC20 token */
  contract_address: string;
  /** amount of tokens to be converted */
  amount: string;
  /** receiver of the coin */
  receiver: string;
  /** sender of the ERC20 token */
  sender: string;
}

export interface MsgConvertERC20Response {
}

/** MsgUpdateParams updates the convert module parameters */
export interface MsgUpdateParams {
  /** authority is the address that can update the parameters */
  authority: string;
  /** params are the new parameters */
  params?: Params | undefined;
}

export interface MsgUpdateParamsResponse {
}

function createBaseMsgRegisterCoin(): MsgRegisterCoin {
  return { authority: "", metadata: [] };
}

export const MsgRegisterCoin = {
  encode(message: MsgRegisterCoin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    for (const v of message.metadata) {
      Metadata.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRegisterCoin {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterCoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata.push(Metadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterCoin {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      metadata: globalThis.Array.isArray(object?.metadata) ? object.metadata.map((e: any) => Metadata.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgRegisterCoin): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => Metadata.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterCoin>, I>>(base?: I): MsgRegisterCoin {
    return MsgRegisterCoin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterCoin>, I>>(object: I): MsgRegisterCoin {
    const message = createBaseMsgRegisterCoin();
    message.authority = object.authority ?? "";
    message.metadata = object.metadata?.map((e) => Metadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgRegisterCoinResponse(): MsgRegisterCoinResponse {
  return {};
}

export const MsgRegisterCoinResponse = {
  encode(_: MsgRegisterCoinResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRegisterCoinResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterCoinResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRegisterCoinResponse {
    return {};
  },

  toJSON(_: MsgRegisterCoinResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterCoinResponse>, I>>(base?: I): MsgRegisterCoinResponse {
    return MsgRegisterCoinResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterCoinResponse>, I>>(_: I): MsgRegisterCoinResponse {
    const message = createBaseMsgRegisterCoinResponse();
    return message;
  },
};

function createBaseMsgRegisterERC20(): MsgRegisterERC20 {
  return { authority: "", contract_addresses: [] };
}

export const MsgRegisterERC20 = {
  encode(message: MsgRegisterERC20, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    for (const v of message.contract_addresses) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRegisterERC20 {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterERC20();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contract_addresses.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterERC20 {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      contract_addresses: globalThis.Array.isArray(object?.contract_addresses)
        ? object.contract_addresses.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: MsgRegisterERC20): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.contract_addresses?.length) {
      obj.contract_addresses = message.contract_addresses;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterERC20>, I>>(base?: I): MsgRegisterERC20 {
    return MsgRegisterERC20.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterERC20>, I>>(object: I): MsgRegisterERC20 {
    const message = createBaseMsgRegisterERC20();
    message.authority = object.authority ?? "";
    message.contract_addresses = object.contract_addresses?.map((e) => e) || [];
    return message;
  },
};

function createBaseMsgRegisterERC20Response(): MsgRegisterERC20Response {
  return {};
}

export const MsgRegisterERC20Response = {
  encode(_: MsgRegisterERC20Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRegisterERC20Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterERC20Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRegisterERC20Response {
    return {};
  },

  toJSON(_: MsgRegisterERC20Response): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterERC20Response>, I>>(base?: I): MsgRegisterERC20Response {
    return MsgRegisterERC20Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterERC20Response>, I>>(_: I): MsgRegisterERC20Response {
    const message = createBaseMsgRegisterERC20Response();
    return message;
  },
};

function createBaseMsgToggleConversion(): MsgToggleConversion {
  return { authority: "", token: "" };
}

export const MsgToggleConversion = {
  encode(message: MsgToggleConversion, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgToggleConversion {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgToggleConversion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgToggleConversion {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
    };
  },

  toJSON(message: MsgToggleConversion): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgToggleConversion>, I>>(base?: I): MsgToggleConversion {
    return MsgToggleConversion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgToggleConversion>, I>>(object: I): MsgToggleConversion {
    const message = createBaseMsgToggleConversion();
    message.authority = object.authority ?? "";
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseMsgToggleConversionResponse(): MsgToggleConversionResponse {
  return {};
}

export const MsgToggleConversionResponse = {
  encode(_: MsgToggleConversionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgToggleConversionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgToggleConversionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgToggleConversionResponse {
    return {};
  },

  toJSON(_: MsgToggleConversionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgToggleConversionResponse>, I>>(base?: I): MsgToggleConversionResponse {
    return MsgToggleConversionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgToggleConversionResponse>, I>>(_: I): MsgToggleConversionResponse {
    const message = createBaseMsgToggleConversionResponse();
    return message;
  },
};

function createBaseMsgConvertCoin(): MsgConvertCoin {
  return { coin: undefined, receiver: "", sender: "" };
}

export const MsgConvertCoin = {
  encode(message: MsgConvertCoin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.coin !== undefined) {
      Coin.encode(message.coin, writer.uint32(10).fork()).ldelim();
    }
    if (message.receiver !== "") {
      writer.uint32(18).string(message.receiver);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgConvertCoin {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConvertCoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.coin = Coin.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.receiver = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgConvertCoin {
    return {
      coin: isSet(object.coin) ? Coin.fromJSON(object.coin) : undefined,
      receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgConvertCoin): unknown {
    const obj: any = {};
    if (message.coin !== undefined) {
      obj.coin = Coin.toJSON(message.coin);
    }
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgConvertCoin>, I>>(base?: I): MsgConvertCoin {
    return MsgConvertCoin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgConvertCoin>, I>>(object: I): MsgConvertCoin {
    const message = createBaseMsgConvertCoin();
    message.coin = (object.coin !== undefined && object.coin !== null) ? Coin.fromPartial(object.coin) : undefined;
    message.receiver = object.receiver ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgConvertCoinResponse(): MsgConvertCoinResponse {
  return {};
}

export const MsgConvertCoinResponse = {
  encode(_: MsgConvertCoinResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgConvertCoinResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConvertCoinResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgConvertCoinResponse {
    return {};
  },

  toJSON(_: MsgConvertCoinResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgConvertCoinResponse>, I>>(base?: I): MsgConvertCoinResponse {
    return MsgConvertCoinResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgConvertCoinResponse>, I>>(_: I): MsgConvertCoinResponse {
    const message = createBaseMsgConvertCoinResponse();
    return message;
  },
};

function createBaseMsgConvertERC20(): MsgConvertERC20 {
  return { contract_address: "", amount: "", receiver: "", sender: "" };
}

export const MsgConvertERC20 = {
  encode(message: MsgConvertERC20, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    if (message.receiver !== "") {
      writer.uint32(26).string(message.receiver);
    }
    if (message.sender !== "") {
      writer.uint32(34).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgConvertERC20 {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConvertERC20();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.receiver = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgConvertERC20 {
    return {
      contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgConvertERC20): unknown {
    const obj: any = {};
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgConvertERC20>, I>>(base?: I): MsgConvertERC20 {
    return MsgConvertERC20.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgConvertERC20>, I>>(object: I): MsgConvertERC20 {
    const message = createBaseMsgConvertERC20();
    message.contract_address = object.contract_address ?? "";
    message.amount = object.amount ?? "";
    message.receiver = object.receiver ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgConvertERC20Response(): MsgConvertERC20Response {
  return {};
}

export const MsgConvertERC20Response = {
  encode(_: MsgConvertERC20Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgConvertERC20Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConvertERC20Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgConvertERC20Response {
    return {};
  },

  toJSON(_: MsgConvertERC20Response): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgConvertERC20Response>, I>>(base?: I): MsgConvertERC20Response {
    return MsgConvertERC20Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgConvertERC20Response>, I>>(_: I): MsgConvertERC20Response {
    const message = createBaseMsgConvertERC20Response();
    return message;
  },
};

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams = {
  encode(message: MsgUpdateParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse = {
  encode(_: MsgUpdateParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

export interface Msg {
  /** RegisterCoin registers a token pair for existing coin */
  RegisterCoin(request: MsgRegisterCoin): Promise<MsgRegisterCoinResponse>;
  /** RegisterERC20 registers a token pair for existing erc20 contract */
  RegisterERC20(request: MsgRegisterERC20): Promise<MsgRegisterERC20Response>;
  /** ToggleConversion toggles the conversion for a token pair */
  ToggleConversion(request: MsgToggleConversion): Promise<MsgToggleConversionResponse>;
  /** ConvertCoin converts a coin to an ERC20 token */
  ConvertCoin(request: MsgConvertCoin): Promise<MsgConvertCoinResponse>;
  /** ConvertERC20 converts an ERC20 token to a coin */
  ConvertERC20(request: MsgConvertERC20): Promise<MsgConvertERC20Response>;
  /** UpdateParams updates the convert module parameters */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}

export const MsgServiceName = "lorenzo.token.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.RegisterCoin = this.RegisterCoin.bind(this);
    this.RegisterERC20 = this.RegisterERC20.bind(this);
    this.ToggleConversion = this.ToggleConversion.bind(this);
    this.ConvertCoin = this.ConvertCoin.bind(this);
    this.ConvertERC20 = this.ConvertERC20.bind(this);
    this.UpdateParams = this.UpdateParams.bind(this);
  }
  RegisterCoin(request: MsgRegisterCoin): Promise<MsgRegisterCoinResponse> {
    const data = MsgRegisterCoin.encode(request).finish();
    const promise = this.rpc.request(this.service, "RegisterCoin", data);
    return promise.then((data) => MsgRegisterCoinResponse.decode(_m0.Reader.create(data)));
  }

  RegisterERC20(request: MsgRegisterERC20): Promise<MsgRegisterERC20Response> {
    const data = MsgRegisterERC20.encode(request).finish();
    const promise = this.rpc.request(this.service, "RegisterERC20", data);
    return promise.then((data) => MsgRegisterERC20Response.decode(_m0.Reader.create(data)));
  }

  ToggleConversion(request: MsgToggleConversion): Promise<MsgToggleConversionResponse> {
    const data = MsgToggleConversion.encode(request).finish();
    const promise = this.rpc.request(this.service, "ToggleConversion", data);
    return promise.then((data) => MsgToggleConversionResponse.decode(_m0.Reader.create(data)));
  }

  ConvertCoin(request: MsgConvertCoin): Promise<MsgConvertCoinResponse> {
    const data = MsgConvertCoin.encode(request).finish();
    const promise = this.rpc.request(this.service, "ConvertCoin", data);
    return promise.then((data) => MsgConvertCoinResponse.decode(_m0.Reader.create(data)));
  }

  ConvertERC20(request: MsgConvertERC20): Promise<MsgConvertERC20Response> {
    const data = MsgConvertERC20.encode(request).finish();
    const promise = this.rpc.request(this.service, "ConvertERC20", data);
    return promise.then((data) => MsgConvertERC20Response.decode(_m0.Reader.create(data)));
  }

  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
