// @generated by protoc-gen-es v1.0.0
// @generated from file lorenzo/token/v1/token.proto (package lorenzo.token.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Source defines the source type of token asset, if source is:
 * - module: token origin is sdk module;
 * - contract: token origin is erc20 contract;
 *
 * @generated from enum lorenzo.token.v1.Source
 */
export declare enum Source {
  /**
   * undefined source
   *
   * @generated from enum value: OWNER_UNDEFINED = 0;
   */
  OWNER_UNDEFINED = 0,

  /**
   * token source is module
   *
   * @generated from enum value: OWNER_MODULE = 1;
   */
  OWNER_MODULE = 1,

  /**
   * token source is erc20 contract
   *
   * @generated from enum value: OWNER_CONTRACT = 2;
   */
  OWNER_CONTRACT = 2,
}

/**
 * TokenPair defines a pairing of a cosmos coin and an erc20 token
 *
 * @generated from message lorenzo.token.v1.TokenPair
 */
export declare class TokenPair extends Message<TokenPair> {
  /**
   * erc20 contract hex format address
   *
   * @generated from field: string contract_address = 1;
   */
  contractAddress: string;

  /**
   * sdk coin base denomination
   *
   * @generated from field: string denom = 2;
   */
  denom: string;

  /**
   * allows for token conversion
   *
   * @generated from field: bool enabled = 3;
   */
  enabled: boolean;

  /**
   * source of token asset
   *
   * @generated from field: lorenzo.token.v1.Source source = 4;
   */
  source: Source;

  constructor(data?: PartialMessage<TokenPair>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.token.v1.TokenPair";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenPair;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenPair;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenPair;

  static equals(a: TokenPair | PlainMessage<TokenPair> | undefined, b: TokenPair | PlainMessage<TokenPair> | undefined): boolean;
}

