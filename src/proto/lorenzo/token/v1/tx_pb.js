// @generated by protoc-gen-es v1.0.0
// @generated from file lorenzo/token/v1/tx.proto (package lorenzo.token.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { Metadata } from "../../../cosmos/bank/v1beta1/bank_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Params } from "./genesis_pb.js";

/**
 * MsgRegisterCoin registers a token pair for existing coin
 * NOTE: this is a governance message.
 *
 * @generated from message lorenzo.token.v1.MsgRegisterCoin
 */
export const MsgRegisterCoin = proto3.makeMessageType(
  "lorenzo.token.v1.MsgRegisterCoin",
  () => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: Metadata, repeated: true },
  ],
);

/**
 * @generated from message lorenzo.token.v1.MsgRegisterCoinResponse
 */
export const MsgRegisterCoinResponse = proto3.makeMessageType(
  "lorenzo.token.v1.MsgRegisterCoinResponse",
  [],
);

/**
 * MsgRegisterERC20 registers a token pair for existing erc20 contract
 * NOTE: this is a governance message.
 *
 * @generated from message lorenzo.token.v1.MsgRegisterERC20
 */
export const MsgRegisterERC20 = proto3.makeMessageType(
  "lorenzo.token.v1.MsgRegisterERC20",
  () => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message lorenzo.token.v1.MsgRegisterERC20Response
 */
export const MsgRegisterERC20Response = proto3.makeMessageType(
  "lorenzo.token.v1.MsgRegisterERC20Response",
  [],
);

/**
 * MsgToggleConversion toggles the conversion for a token pair
 * NOTE: this is a governance message.
 *
 * @generated from message lorenzo.token.v1.MsgToggleConversion
 */
export const MsgToggleConversion = proto3.makeMessageType(
  "lorenzo.token.v1.MsgToggleConversion",
  () => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message lorenzo.token.v1.MsgToggleConversionResponse
 */
export const MsgToggleConversionResponse = proto3.makeMessageType(
  "lorenzo.token.v1.MsgToggleConversionResponse",
  [],
);

/**
 * MsgConvertCoin converts a coin to an ERC20 token
 *
 * @generated from message lorenzo.token.v1.MsgConvertCoin
 */
export const MsgConvertCoin = proto3.makeMessageType(
  "lorenzo.token.v1.MsgConvertCoin",
  () => [
    { no: 1, name: "coin", kind: "message", T: Coin },
    { no: 2, name: "receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message lorenzo.token.v1.MsgConvertCoinResponse
 */
export const MsgConvertCoinResponse = proto3.makeMessageType(
  "lorenzo.token.v1.MsgConvertCoinResponse",
  [],
);

/**
 * MsgConvertERC20 converts an ERC20 token to a coin
 *
 * @generated from message lorenzo.token.v1.MsgConvertERC20
 */
export const MsgConvertERC20 = proto3.makeMessageType(
  "lorenzo.token.v1.MsgConvertERC20",
  () => [
    { no: 1, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message lorenzo.token.v1.MsgConvertERC20Response
 */
export const MsgConvertERC20Response = proto3.makeMessageType(
  "lorenzo.token.v1.MsgConvertERC20Response",
  [],
);

/**
 * MsgUpdateParams updates the convert module parameters
 *
 * @generated from message lorenzo.token.v1.MsgUpdateParams
 */
export const MsgUpdateParams = proto3.makeMessageType(
  "lorenzo.token.v1.MsgUpdateParams",
  () => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ],
);

/**
 * @generated from message lorenzo.token.v1.MsgUpdateParamsResponse
 */
export const MsgUpdateParamsResponse = proto3.makeMessageType(
  "lorenzo.token.v1.MsgUpdateParamsResponse",
  [],
);

