// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: lorenzo/btclightclient/v1/query.proto

/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { BTCHeaderInfo } from "./btclightclient";
import { Params } from "./params";

/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params?: Params | undefined;
}

/**
 * QueryHashesRequest is request type for the Query/Hashes RPC method.
 * It involves retrieving all hashes that are maintained by the module.
 */
export interface QueryHashesRequest {
  pagination?: PageRequest | undefined;
}

/** QueryHashesResponse is response type for the Query/Hashes RPC method. */
export interface QueryHashesResponse {
  hashes: Uint8Array[];
  pagination?: PageResponse | undefined;
}

/**
 * QueryContainsRequest is request type for the Query/Contains RPC method.
 * It involves checking whether a hash is maintained by the module.
 */
export interface QueryContainsRequest {
  hash: Uint8Array;
}

/** QueryContainsResponse is response type for the Query/Contains RPC method. */
export interface QueryContainsResponse {
  contains: boolean;
}

/**
 * QueryContainsRequest is request type for the temporary Query/ContainsBytes
 * RPC method. It involves checking whether a hash is maintained by the module.
 */
export interface QueryContainsBytesRequest {
  hash: Uint8Array;
}

/**
 * QueryContainsResponse is response type for the temporary Query/ContainsBytes
 * RPC method.
 */
export interface QueryContainsBytesResponse {
  contains: boolean;
}

/**
 * QueryMainChainRequest is request type for the Query/MainChain RPC method.
 * It involves retrieving the canonical chain maintained by the module.
 */
export interface QueryMainChainRequest {
  pagination?: PageRequest | undefined;
}

/** QueryMainChainResponse is response type for the Query/MainChain RPC method. */
export interface QueryMainChainResponse {
  headers: BTCHeaderInfo[];
  pagination?: PageResponse | undefined;
}

/** QueryTipRequest is the request type for the Query/Tip RPC method. */
export interface QueryTipRequest {
}

/** QueryTipResponse is the response type for the Query/Tip RPC method. */
export interface QueryTipResponse {
  header?: BTCHeaderInfo | undefined;
}

/**
 * QueryBaseHeaderRequest is the request type for the Query/BaseHeader RPC
 * method.
 */
export interface QueryBaseHeaderRequest {
}

/**
 * QueryBaseHeaderResponse is the response type for the Query/BaseHeader RPC
 * method.
 */
export interface QueryBaseHeaderResponse {
  header?: BTCHeaderInfo | undefined;
}

/**
 * QueryMainChainDepthRequest is the request type for the Query/MainChainDepth
 * RPC it contains hex encoded hash of btc block header as parameter
 */
export interface QueryHeaderDepthRequest {
  hash: string;
}

/**
 * QueryMainChainDepthResponse is the response type for the Query/MainChainDepth
 * RPC it contains depth of the block in main chain
 */
export interface QueryHeaderDepthResponse {
  depth: Long;
}

export interface QueryFeeRateRequest {
}

export interface QueryFeeRateResponse {
  feeRate: Long;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest = {
  encode(_: QueryParamsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse = {
  encode(message: QueryParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryHashesRequest(): QueryHashesRequest {
  return { pagination: undefined };
}

export const QueryHashesRequest = {
  encode(message: QueryHashesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryHashesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryHashesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryHashesRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryHashesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryHashesRequest>, I>>(base?: I): QueryHashesRequest {
    return QueryHashesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryHashesRequest>, I>>(object: I): QueryHashesRequest {
    const message = createBaseQueryHashesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryHashesResponse(): QueryHashesResponse {
  return { hashes: [], pagination: undefined };
}

export const QueryHashesResponse = {
  encode(message: QueryHashesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.hashes) {
      writer.uint32(10).bytes(v!);
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryHashesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryHashesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hashes.push(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryHashesResponse {
    return {
      hashes: globalThis.Array.isArray(object?.hashes) ? object.hashes.map((e: any) => bytesFromBase64(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryHashesResponse): unknown {
    const obj: any = {};
    if (message.hashes?.length) {
      obj.hashes = message.hashes.map((e) => base64FromBytes(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryHashesResponse>, I>>(base?: I): QueryHashesResponse {
    return QueryHashesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryHashesResponse>, I>>(object: I): QueryHashesResponse {
    const message = createBaseQueryHashesResponse();
    message.hashes = object.hashes?.map((e) => e) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryContainsRequest(): QueryContainsRequest {
  return { hash: new Uint8Array(0) };
}

export const QueryContainsRequest = {
  encode(message: QueryContainsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hash.length !== 0) {
      writer.uint32(10).bytes(message.hash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryContainsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContainsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContainsRequest {
    return { hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0) };
  },

  toJSON(message: QueryContainsRequest): unknown {
    const obj: any = {};
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryContainsRequest>, I>>(base?: I): QueryContainsRequest {
    return QueryContainsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryContainsRequest>, I>>(object: I): QueryContainsRequest {
    const message = createBaseQueryContainsRequest();
    message.hash = object.hash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryContainsResponse(): QueryContainsResponse {
  return { contains: false };
}

export const QueryContainsResponse = {
  encode(message: QueryContainsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contains !== false) {
      writer.uint32(8).bool(message.contains);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryContainsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContainsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.contains = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContainsResponse {
    return { contains: isSet(object.contains) ? globalThis.Boolean(object.contains) : false };
  },

  toJSON(message: QueryContainsResponse): unknown {
    const obj: any = {};
    if (message.contains !== false) {
      obj.contains = message.contains;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryContainsResponse>, I>>(base?: I): QueryContainsResponse {
    return QueryContainsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryContainsResponse>, I>>(object: I): QueryContainsResponse {
    const message = createBaseQueryContainsResponse();
    message.contains = object.contains ?? false;
    return message;
  },
};

function createBaseQueryContainsBytesRequest(): QueryContainsBytesRequest {
  return { hash: new Uint8Array(0) };
}

export const QueryContainsBytesRequest = {
  encode(message: QueryContainsBytesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hash.length !== 0) {
      writer.uint32(10).bytes(message.hash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryContainsBytesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContainsBytesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContainsBytesRequest {
    return { hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0) };
  },

  toJSON(message: QueryContainsBytesRequest): unknown {
    const obj: any = {};
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryContainsBytesRequest>, I>>(base?: I): QueryContainsBytesRequest {
    return QueryContainsBytesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryContainsBytesRequest>, I>>(object: I): QueryContainsBytesRequest {
    const message = createBaseQueryContainsBytesRequest();
    message.hash = object.hash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryContainsBytesResponse(): QueryContainsBytesResponse {
  return { contains: false };
}

export const QueryContainsBytesResponse = {
  encode(message: QueryContainsBytesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contains !== false) {
      writer.uint32(8).bool(message.contains);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryContainsBytesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContainsBytesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.contains = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContainsBytesResponse {
    return { contains: isSet(object.contains) ? globalThis.Boolean(object.contains) : false };
  },

  toJSON(message: QueryContainsBytesResponse): unknown {
    const obj: any = {};
    if (message.contains !== false) {
      obj.contains = message.contains;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryContainsBytesResponse>, I>>(base?: I): QueryContainsBytesResponse {
    return QueryContainsBytesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryContainsBytesResponse>, I>>(object: I): QueryContainsBytesResponse {
    const message = createBaseQueryContainsBytesResponse();
    message.contains = object.contains ?? false;
    return message;
  },
};

function createBaseQueryMainChainRequest(): QueryMainChainRequest {
  return { pagination: undefined };
}

export const QueryMainChainRequest = {
  encode(message: QueryMainChainRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryMainChainRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMainChainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMainChainRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryMainChainRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMainChainRequest>, I>>(base?: I): QueryMainChainRequest {
    return QueryMainChainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMainChainRequest>, I>>(object: I): QueryMainChainRequest {
    const message = createBaseQueryMainChainRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryMainChainResponse(): QueryMainChainResponse {
  return { headers: [], pagination: undefined };
}

export const QueryMainChainResponse = {
  encode(message: QueryMainChainResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.headers) {
      BTCHeaderInfo.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryMainChainResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMainChainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headers.push(BTCHeaderInfo.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMainChainResponse {
    return {
      headers: globalThis.Array.isArray(object?.headers)
        ? object.headers.map((e: any) => BTCHeaderInfo.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryMainChainResponse): unknown {
    const obj: any = {};
    if (message.headers?.length) {
      obj.headers = message.headers.map((e) => BTCHeaderInfo.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMainChainResponse>, I>>(base?: I): QueryMainChainResponse {
    return QueryMainChainResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMainChainResponse>, I>>(object: I): QueryMainChainResponse {
    const message = createBaseQueryMainChainResponse();
    message.headers = object.headers?.map((e) => BTCHeaderInfo.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryTipRequest(): QueryTipRequest {
  return {};
}

export const QueryTipRequest = {
  encode(_: QueryTipRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryTipRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryTipRequest {
    return {};
  },

  toJSON(_: QueryTipRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTipRequest>, I>>(base?: I): QueryTipRequest {
    return QueryTipRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTipRequest>, I>>(_: I): QueryTipRequest {
    const message = createBaseQueryTipRequest();
    return message;
  },
};

function createBaseQueryTipResponse(): QueryTipResponse {
  return { header: undefined };
}

export const QueryTipResponse = {
  encode(message: QueryTipResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.header !== undefined) {
      BTCHeaderInfo.encode(message.header, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryTipResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTipResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = BTCHeaderInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTipResponse {
    return { header: isSet(object.header) ? BTCHeaderInfo.fromJSON(object.header) : undefined };
  },

  toJSON(message: QueryTipResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = BTCHeaderInfo.toJSON(message.header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTipResponse>, I>>(base?: I): QueryTipResponse {
    return QueryTipResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTipResponse>, I>>(object: I): QueryTipResponse {
    const message = createBaseQueryTipResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? BTCHeaderInfo.fromPartial(object.header)
      : undefined;
    return message;
  },
};

function createBaseQueryBaseHeaderRequest(): QueryBaseHeaderRequest {
  return {};
}

export const QueryBaseHeaderRequest = {
  encode(_: QueryBaseHeaderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBaseHeaderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBaseHeaderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryBaseHeaderRequest {
    return {};
  },

  toJSON(_: QueryBaseHeaderRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBaseHeaderRequest>, I>>(base?: I): QueryBaseHeaderRequest {
    return QueryBaseHeaderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBaseHeaderRequest>, I>>(_: I): QueryBaseHeaderRequest {
    const message = createBaseQueryBaseHeaderRequest();
    return message;
  },
};

function createBaseQueryBaseHeaderResponse(): QueryBaseHeaderResponse {
  return { header: undefined };
}

export const QueryBaseHeaderResponse = {
  encode(message: QueryBaseHeaderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.header !== undefined) {
      BTCHeaderInfo.encode(message.header, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBaseHeaderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBaseHeaderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = BTCHeaderInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBaseHeaderResponse {
    return { header: isSet(object.header) ? BTCHeaderInfo.fromJSON(object.header) : undefined };
  },

  toJSON(message: QueryBaseHeaderResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = BTCHeaderInfo.toJSON(message.header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBaseHeaderResponse>, I>>(base?: I): QueryBaseHeaderResponse {
    return QueryBaseHeaderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBaseHeaderResponse>, I>>(object: I): QueryBaseHeaderResponse {
    const message = createBaseQueryBaseHeaderResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? BTCHeaderInfo.fromPartial(object.header)
      : undefined;
    return message;
  },
};

function createBaseQueryHeaderDepthRequest(): QueryHeaderDepthRequest {
  return { hash: "" };
}

export const QueryHeaderDepthRequest = {
  encode(message: QueryHeaderDepthRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hash !== "") {
      writer.uint32(10).string(message.hash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryHeaderDepthRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryHeaderDepthRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hash = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryHeaderDepthRequest {
    return { hash: isSet(object.hash) ? globalThis.String(object.hash) : "" };
  },

  toJSON(message: QueryHeaderDepthRequest): unknown {
    const obj: any = {};
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryHeaderDepthRequest>, I>>(base?: I): QueryHeaderDepthRequest {
    return QueryHeaderDepthRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryHeaderDepthRequest>, I>>(object: I): QueryHeaderDepthRequest {
    const message = createBaseQueryHeaderDepthRequest();
    message.hash = object.hash ?? "";
    return message;
  },
};

function createBaseQueryHeaderDepthResponse(): QueryHeaderDepthResponse {
  return { depth: Long.UZERO };
}

export const QueryHeaderDepthResponse = {
  encode(message: QueryHeaderDepthResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.depth.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.depth);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryHeaderDepthResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryHeaderDepthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.depth = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryHeaderDepthResponse {
    return { depth: isSet(object.depth) ? Long.fromValue(object.depth) : Long.UZERO };
  },

  toJSON(message: QueryHeaderDepthResponse): unknown {
    const obj: any = {};
    if (!message.depth.equals(Long.UZERO)) {
      obj.depth = (message.depth || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryHeaderDepthResponse>, I>>(base?: I): QueryHeaderDepthResponse {
    return QueryHeaderDepthResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryHeaderDepthResponse>, I>>(object: I): QueryHeaderDepthResponse {
    const message = createBaseQueryHeaderDepthResponse();
    message.depth = (object.depth !== undefined && object.depth !== null) ? Long.fromValue(object.depth) : Long.UZERO;
    return message;
  },
};

function createBaseQueryFeeRateRequest(): QueryFeeRateRequest {
  return {};
}

export const QueryFeeRateRequest = {
  encode(_: QueryFeeRateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeeRateRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFeeRateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryFeeRateRequest {
    return {};
  },

  toJSON(_: QueryFeeRateRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFeeRateRequest>, I>>(base?: I): QueryFeeRateRequest {
    return QueryFeeRateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFeeRateRequest>, I>>(_: I): QueryFeeRateRequest {
    const message = createBaseQueryFeeRateRequest();
    return message;
  },
};

function createBaseQueryFeeRateResponse(): QueryFeeRateResponse {
  return { feeRate: Long.UZERO };
}

export const QueryFeeRateResponse = {
  encode(message: QueryFeeRateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.feeRate.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.feeRate);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeeRateResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFeeRateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.feeRate = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFeeRateResponse {
    return { feeRate: isSet(object.feeRate) ? Long.fromValue(object.feeRate) : Long.UZERO };
  },

  toJSON(message: QueryFeeRateResponse): unknown {
    const obj: any = {};
    if (!message.feeRate.equals(Long.UZERO)) {
      obj.feeRate = (message.feeRate || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFeeRateResponse>, I>>(base?: I): QueryFeeRateResponse {
    return QueryFeeRateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFeeRateResponse>, I>>(object: I): QueryFeeRateResponse {
    const message = createBaseQueryFeeRateResponse();
    message.feeRate = (object.feeRate !== undefined && object.feeRate !== null)
      ? Long.fromValue(object.feeRate)
      : Long.UZERO;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Params queries the parameters of the module. */
  Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
  /** Hashes retrieves the hashes maintained by the module. */
  Hashes(request: DeepPartial<QueryHashesRequest>, metadata?: grpc.Metadata): Promise<QueryHashesResponse>;
  /** Contains checks whether a hash is maintained by the module. */
  Contains(request: DeepPartial<QueryContainsRequest>, metadata?: grpc.Metadata): Promise<QueryContainsResponse>;
  /**
   * ContainsBytes is a temporary method that
   * checks whether a hash is maintained by the module.
   * See discussion at https://github.com/Lorenzo-Protocol/lorenzo/v2/pull/132
   * for more details.
   */
  ContainsBytes(
    request: DeepPartial<QueryContainsBytesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryContainsBytesResponse>;
  /** MainChain returns the canonical chain */
  MainChain(request: DeepPartial<QueryMainChainRequest>, metadata?: grpc.Metadata): Promise<QueryMainChainResponse>;
  /** Tip return best header on canonical chain */
  Tip(request: DeepPartial<QueryTipRequest>, metadata?: grpc.Metadata): Promise<QueryTipResponse>;
  /**
   * BaseHeader returns the base BTC header of the chain. This header is defined
   * on genesis.
   */
  BaseHeader(request: DeepPartial<QueryBaseHeaderRequest>, metadata?: grpc.Metadata): Promise<QueryBaseHeaderResponse>;
  /**
   * HeaderDepth returns the depth of the header in main chain or error if the
   * block is not found or it exists on fork
   */
  HeaderDepth(
    request: DeepPartial<QueryHeaderDepthRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryHeaderDepthResponse>;
  FeeRate(request: DeepPartial<QueryFeeRateRequest>, metadata?: grpc.Metadata): Promise<QueryFeeRateResponse>;
}

export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Hashes = this.Hashes.bind(this);
    this.Contains = this.Contains.bind(this);
    this.ContainsBytes = this.ContainsBytes.bind(this);
    this.MainChain = this.MainChain.bind(this);
    this.Tip = this.Tip.bind(this);
    this.BaseHeader = this.BaseHeader.bind(this);
    this.HeaderDepth = this.HeaderDepth.bind(this);
    this.FeeRate = this.FeeRate.bind(this);
  }

  Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse> {
    return this.rpc.unary(QueryParamsDesc, QueryParamsRequest.fromPartial(request), metadata);
  }

  Hashes(request: DeepPartial<QueryHashesRequest>, metadata?: grpc.Metadata): Promise<QueryHashesResponse> {
    return this.rpc.unary(QueryHashesDesc, QueryHashesRequest.fromPartial(request), metadata);
  }

  Contains(request: DeepPartial<QueryContainsRequest>, metadata?: grpc.Metadata): Promise<QueryContainsResponse> {
    return this.rpc.unary(QueryContainsDesc, QueryContainsRequest.fromPartial(request), metadata);
  }

  ContainsBytes(
    request: DeepPartial<QueryContainsBytesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryContainsBytesResponse> {
    return this.rpc.unary(QueryContainsBytesDesc, QueryContainsBytesRequest.fromPartial(request), metadata);
  }

  MainChain(request: DeepPartial<QueryMainChainRequest>, metadata?: grpc.Metadata): Promise<QueryMainChainResponse> {
    return this.rpc.unary(QueryMainChainDesc, QueryMainChainRequest.fromPartial(request), metadata);
  }

  Tip(request: DeepPartial<QueryTipRequest>, metadata?: grpc.Metadata): Promise<QueryTipResponse> {
    return this.rpc.unary(QueryTipDesc, QueryTipRequest.fromPartial(request), metadata);
  }

  BaseHeader(request: DeepPartial<QueryBaseHeaderRequest>, metadata?: grpc.Metadata): Promise<QueryBaseHeaderResponse> {
    return this.rpc.unary(QueryBaseHeaderDesc, QueryBaseHeaderRequest.fromPartial(request), metadata);
  }

  HeaderDepth(
    request: DeepPartial<QueryHeaderDepthRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryHeaderDepthResponse> {
    return this.rpc.unary(QueryHeaderDepthDesc, QueryHeaderDepthRequest.fromPartial(request), metadata);
  }

  FeeRate(request: DeepPartial<QueryFeeRateRequest>, metadata?: grpc.Metadata): Promise<QueryFeeRateResponse> {
    return this.rpc.unary(QueryFeeRateDesc, QueryFeeRateRequest.fromPartial(request), metadata);
  }
}

export const QueryDesc = { serviceName: "lorenzo.btclightclient.v1.Query" };

export const QueryParamsDesc: UnaryMethodDefinitionish = {
  methodName: "Params",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryParamsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryParamsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryHashesDesc: UnaryMethodDefinitionish = {
  methodName: "Hashes",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryHashesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryHashesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryContainsDesc: UnaryMethodDefinitionish = {
  methodName: "Contains",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryContainsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryContainsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryContainsBytesDesc: UnaryMethodDefinitionish = {
  methodName: "ContainsBytes",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryContainsBytesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryContainsBytesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryMainChainDesc: UnaryMethodDefinitionish = {
  methodName: "MainChain",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryMainChainRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryMainChainResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryTipDesc: UnaryMethodDefinitionish = {
  methodName: "Tip",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryTipRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryTipResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryBaseHeaderDesc: UnaryMethodDefinitionish = {
  methodName: "BaseHeader",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryBaseHeaderRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryBaseHeaderResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryHeaderDepthDesc: UnaryMethodDefinitionish = {
  methodName: "HeaderDepth",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryHeaderDepthRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryHeaderDepthResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryFeeRateDesc: UnaryMethodDefinitionish = {
  methodName: "FeeRate",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryFeeRateRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryFeeRateResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
