// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: lorenzo/btcstaking/v1/event.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { BTCStakingRecord } from "./staking_record";

/** BTC staking creation event */
export interface EventBTCStakingCreated {
  record?: BTCStakingRecord | undefined;
}

export interface EventBurnCreated {
  signer: string;
  btcTargetAddress: string;
  amount?: Coin | undefined;
}

function createBaseEventBTCStakingCreated(): EventBTCStakingCreated {
  return { record: undefined };
}

export const EventBTCStakingCreated = {
  encode(message: EventBTCStakingCreated, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.record !== undefined) {
      BTCStakingRecord.encode(message.record, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventBTCStakingCreated {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventBTCStakingCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.record = BTCStakingRecord.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventBTCStakingCreated {
    return { record: isSet(object.record) ? BTCStakingRecord.fromJSON(object.record) : undefined };
  },

  toJSON(message: EventBTCStakingCreated): unknown {
    const obj: any = {};
    if (message.record !== undefined) {
      obj.record = BTCStakingRecord.toJSON(message.record);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventBTCStakingCreated>, I>>(base?: I): EventBTCStakingCreated {
    return EventBTCStakingCreated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventBTCStakingCreated>, I>>(object: I): EventBTCStakingCreated {
    const message = createBaseEventBTCStakingCreated();
    message.record = (object.record !== undefined && object.record !== null)
      ? BTCStakingRecord.fromPartial(object.record)
      : undefined;
    return message;
  },
};

function createBaseEventBurnCreated(): EventBurnCreated {
  return { signer: "", btcTargetAddress: "", amount: undefined };
}

export const EventBurnCreated = {
  encode(message: EventBurnCreated, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.btcTargetAddress !== "") {
      writer.uint32(18).string(message.btcTargetAddress);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventBurnCreated {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventBurnCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.btcTargetAddress = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventBurnCreated {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      btcTargetAddress: isSet(object.btcTargetAddress) ? globalThis.String(object.btcTargetAddress) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
    };
  },

  toJSON(message: EventBurnCreated): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.btcTargetAddress !== "") {
      obj.btcTargetAddress = message.btcTargetAddress;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventBurnCreated>, I>>(base?: I): EventBurnCreated {
    return EventBurnCreated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventBurnCreated>, I>>(object: I): EventBurnCreated {
    const message = createBaseEventBurnCreated();
    message.signer = object.signer ?? "";
    message.btcTargetAddress = object.btcTargetAddress ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
