// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: lorenzo/btcstaking/v1/query.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Params } from "./params";
import { BTCStakingRecord } from "./staking_record";

export interface QueryParamsRequest {
}

export interface QueryParamsResponse {
  params?: Params | undefined;
}

export interface StakingRecordDisplay {
  tx_id: string;
  receiver_address: string;
  amount: string;
  agent_name: string;
  agent_btc_addr: string;
  chain_id: number;
}

export interface QueryStakingRecordRequest {
  txHash: Uint8Array;
}

export interface QueryStakingRecordResponse {
  record?: BTCStakingRecord | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest = {
  encode(_: QueryParamsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse = {
  encode(message: QueryParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseStakingRecordDisplay(): StakingRecordDisplay {
  return { tx_id: "", receiver_address: "", amount: "", agent_name: "", agent_btc_addr: "", chain_id: 0 };
}

export const StakingRecordDisplay = {
  encode(message: StakingRecordDisplay, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tx_id !== "") {
      writer.uint32(10).string(message.tx_id);
    }
    if (message.receiver_address !== "") {
      writer.uint32(18).string(message.receiver_address);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    if (message.agent_name !== "") {
      writer.uint32(34).string(message.agent_name);
    }
    if (message.agent_btc_addr !== "") {
      writer.uint32(42).string(message.agent_btc_addr);
    }
    if (message.chain_id !== 0) {
      writer.uint32(48).uint32(message.chain_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StakingRecordDisplay {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStakingRecordDisplay();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tx_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.receiver_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.agent_name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.agent_btc_addr = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.chain_id = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StakingRecordDisplay {
    return {
      tx_id: isSet(object.tx_id) ? globalThis.String(object.tx_id) : "",
      receiver_address: isSet(object.receiver_address) ? globalThis.String(object.receiver_address) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      agent_name: isSet(object.agent_name) ? globalThis.String(object.agent_name) : "",
      agent_btc_addr: isSet(object.agent_btc_addr) ? globalThis.String(object.agent_btc_addr) : "",
      chain_id: isSet(object.chain_id) ? globalThis.Number(object.chain_id) : 0,
    };
  },

  toJSON(message: StakingRecordDisplay): unknown {
    const obj: any = {};
    if (message.tx_id !== "") {
      obj.tx_id = message.tx_id;
    }
    if (message.receiver_address !== "") {
      obj.receiver_address = message.receiver_address;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.agent_name !== "") {
      obj.agent_name = message.agent_name;
    }
    if (message.agent_btc_addr !== "") {
      obj.agent_btc_addr = message.agent_btc_addr;
    }
    if (message.chain_id !== 0) {
      obj.chain_id = Math.round(message.chain_id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StakingRecordDisplay>, I>>(base?: I): StakingRecordDisplay {
    return StakingRecordDisplay.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StakingRecordDisplay>, I>>(object: I): StakingRecordDisplay {
    const message = createBaseStakingRecordDisplay();
    message.tx_id = object.tx_id ?? "";
    message.receiver_address = object.receiver_address ?? "";
    message.amount = object.amount ?? "";
    message.agent_name = object.agent_name ?? "";
    message.agent_btc_addr = object.agent_btc_addr ?? "";
    message.chain_id = object.chain_id ?? 0;
    return message;
  },
};

function createBaseQueryStakingRecordRequest(): QueryStakingRecordRequest {
  return { txHash: new Uint8Array(0) };
}

export const QueryStakingRecordRequest = {
  encode(message: QueryStakingRecordRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.txHash.length !== 0) {
      writer.uint32(10).bytes(message.txHash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryStakingRecordRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakingRecordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakingRecordRequest {
    return { txHash: isSet(object.txHash) ? bytesFromBase64(object.txHash) : new Uint8Array(0) };
  },

  toJSON(message: QueryStakingRecordRequest): unknown {
    const obj: any = {};
    if (message.txHash.length !== 0) {
      obj.txHash = base64FromBytes(message.txHash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryStakingRecordRequest>, I>>(base?: I): QueryStakingRecordRequest {
    return QueryStakingRecordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryStakingRecordRequest>, I>>(object: I): QueryStakingRecordRequest {
    const message = createBaseQueryStakingRecordRequest();
    message.txHash = object.txHash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryStakingRecordResponse(): QueryStakingRecordResponse {
  return { record: undefined };
}

export const QueryStakingRecordResponse = {
  encode(message: QueryStakingRecordResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.record !== undefined) {
      BTCStakingRecord.encode(message.record, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryStakingRecordResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStakingRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.record = BTCStakingRecord.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStakingRecordResponse {
    return { record: isSet(object.record) ? BTCStakingRecord.fromJSON(object.record) : undefined };
  },

  toJSON(message: QueryStakingRecordResponse): unknown {
    const obj: any = {};
    if (message.record !== undefined) {
      obj.record = BTCStakingRecord.toJSON(message.record);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryStakingRecordResponse>, I>>(base?: I): QueryStakingRecordResponse {
    return QueryStakingRecordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryStakingRecordResponse>, I>>(object: I): QueryStakingRecordResponse {
    const message = createBaseQueryStakingRecordResponse();
    message.record = (object.record !== undefined && object.record !== null)
      ? BTCStakingRecord.fromPartial(object.record)
      : undefined;
    return message;
  },
};

export interface Query {
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  StakingRecord(request: QueryStakingRecordRequest): Promise<QueryStakingRecordResponse>;
}

export const QueryServiceName = "lorenzo.btcstaking.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.StakingRecord = this.StakingRecord.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(_m0.Reader.create(data)));
  }

  StakingRecord(request: QueryStakingRecordRequest): Promise<QueryStakingRecordResponse> {
    const data = QueryStakingRecordRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "StakingRecord", data);
    return promise.then((data) => QueryStakingRecordResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
