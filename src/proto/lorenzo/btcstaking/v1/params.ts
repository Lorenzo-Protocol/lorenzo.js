// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: lorenzo/btcstaking/v1/params.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export interface Receiver {
  /** name of the receiver */
  name: string;
  /** btc address */
  addr: string;
  /** like 0xBAb28FF7659481F1c8516f616A576339936AFB06 */
  eth_addr: string;
}

/** GenesisState defines the btcstaking module's genesis state. */
export interface Params {
  /** receivers' name must be unique */
  receivers: Receiver[];
  /** deprecated */
  btc_confirmations_depth: number;
  /** allow list to mint for receiver with eth_addr */
  minter_allow_list: string[];
  /** cross chain bridge contract address */
  bridge_addr: string;
  /** minimum satoshi per txout */
  txout_dust_amount: string;
}

function createBaseReceiver(): Receiver {
  return { name: "", addr: "", eth_addr: "" };
}

export const Receiver = {
  encode(message: Receiver, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.addr !== "") {
      writer.uint32(18).string(message.addr);
    }
    if (message.eth_addr !== "") {
      writer.uint32(26).string(message.eth_addr);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Receiver {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceiver();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.addr = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.eth_addr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Receiver {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      addr: isSet(object.addr) ? globalThis.String(object.addr) : "",
      eth_addr: isSet(object.eth_addr) ? globalThis.String(object.eth_addr) : "",
    };
  },

  toJSON(message: Receiver): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.addr !== "") {
      obj.addr = message.addr;
    }
    if (message.eth_addr !== "") {
      obj.eth_addr = message.eth_addr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Receiver>, I>>(base?: I): Receiver {
    return Receiver.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Receiver>, I>>(object: I): Receiver {
    const message = createBaseReceiver();
    message.name = object.name ?? "";
    message.addr = object.addr ?? "";
    message.eth_addr = object.eth_addr ?? "";
    return message;
  },
};

function createBaseParams(): Params {
  return { receivers: [], btc_confirmations_depth: 0, minter_allow_list: [], bridge_addr: "", txout_dust_amount: "0" };
}

export const Params = {
  encode(message: Params, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.receivers) {
      Receiver.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.btc_confirmations_depth !== 0) {
      writer.uint32(16).uint32(message.btc_confirmations_depth);
    }
    for (const v of message.minter_allow_list) {
      writer.uint32(26).string(v!);
    }
    if (message.bridge_addr !== "") {
      writer.uint32(34).string(message.bridge_addr);
    }
    if (message.txout_dust_amount !== "0") {
      writer.uint32(40).int64(message.txout_dust_amount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Params {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.receivers.push(Receiver.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.btc_confirmations_depth = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.minter_allow_list.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.bridge_addr = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.txout_dust_amount = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      receivers: globalThis.Array.isArray(object?.receivers)
        ? object.receivers.map((e: any) => Receiver.fromJSON(e))
        : [],
      btc_confirmations_depth: isSet(object.btc_confirmations_depth)
        ? globalThis.Number(object.btc_confirmations_depth)
        : 0,
      minter_allow_list: globalThis.Array.isArray(object?.minter_allow_list)
        ? object.minter_allow_list.map((e: any) => globalThis.String(e))
        : [],
      bridge_addr: isSet(object.bridge_addr) ? globalThis.String(object.bridge_addr) : "",
      txout_dust_amount: isSet(object.txout_dust_amount) ? globalThis.String(object.txout_dust_amount) : "0",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.receivers?.length) {
      obj.receivers = message.receivers.map((e) => Receiver.toJSON(e));
    }
    if (message.btc_confirmations_depth !== 0) {
      obj.btc_confirmations_depth = Math.round(message.btc_confirmations_depth);
    }
    if (message.minter_allow_list?.length) {
      obj.minter_allow_list = message.minter_allow_list;
    }
    if (message.bridge_addr !== "") {
      obj.bridge_addr = message.bridge_addr;
    }
    if (message.txout_dust_amount !== "0") {
      obj.txout_dust_amount = message.txout_dust_amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.receivers = object.receivers?.map((e) => Receiver.fromPartial(e)) || [];
    message.btc_confirmations_depth = object.btc_confirmations_depth ?? 0;
    message.minter_allow_list = object.minter_allow_list?.map((e) => e) || [];
    message.bridge_addr = object.bridge_addr ?? "";
    message.txout_dust_amount = object.txout_dust_amount ?? "0";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
