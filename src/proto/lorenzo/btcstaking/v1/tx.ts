// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: lorenzo/btcstaking/v1/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params, Receiver } from "./params";

export interface TransactionKey {
  index: number;
  hash: Uint8Array;
}

/**
 * TransactionInfo is the info of a tx on Bitcoin,
 * including
 * - the position of the tx on BTC blockchain
 * - the full tx content
 * - the Merkle proof that this tx is on the above position
 */
export interface TransactionInfo {
  /**
   * key is the position (txIdx, blockHash) of this tx on BTC blockchain
   * Although it is already a part of SubmissionKey, we store it here again
   * to make TransactionInfo self-contained.
   * For example, storing the key allows TransactionInfo to not relay on
   * the fact that TransactionInfo will be ordered in the same order as
   * TransactionKeys in SubmissionKey.
   */
  key?:
    | TransactionKey
    | undefined;
  /** transaction is the full transaction in bytes */
  transaction: Uint8Array;
  proof: Uint8Array;
}

export interface MsgCreateBTCStaking {
  signer: string;
  staking_tx?:
    | TransactionInfo
    | undefined;
  /** deprecated */
  receiver: string;
  agent_id: string;
}

export interface MsgCreateBTCStakingResponse {
}

export interface MsgBurnRequest {
  signer: string;
  btc_target_address: string;
  amount: string;
}

export interface MsgBurnResponse {
}

export interface MsgAddReceiver {
  authority: string;
  receiver?: Receiver | undefined;
}

export interface MsgAddReceiverResponse {
}

export interface MsgRemoveReceiver {
  authority: string;
  receiver: string;
}

export interface MsgRemoveReceiverResponse {
}

export interface MsgUpdateParams {
  authority: string;
  params?: Params | undefined;
}

export interface MsgUpdateParamsResponse {
}

function createBaseTransactionKey(): TransactionKey {
  return { index: 0, hash: new Uint8Array(0) };
}

export const TransactionKey = {
  encode(message: TransactionKey, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.index !== 0) {
      writer.uint32(8).uint32(message.index);
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionKey {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.index = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionKey {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
    };
  },

  toJSON(message: TransactionKey): unknown {
    const obj: any = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionKey>, I>>(base?: I): TransactionKey {
    return TransactionKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionKey>, I>>(object: I): TransactionKey {
    const message = createBaseTransactionKey();
    message.index = object.index ?? 0;
    message.hash = object.hash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseTransactionInfo(): TransactionInfo {
  return { key: undefined, transaction: new Uint8Array(0), proof: new Uint8Array(0) };
}

export const TransactionInfo = {
  encode(message: TransactionInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== undefined) {
      TransactionKey.encode(message.key, writer.uint32(10).fork()).ldelim();
    }
    if (message.transaction.length !== 0) {
      writer.uint32(18).bytes(message.transaction);
    }
    if (message.proof.length !== 0) {
      writer.uint32(26).bytes(message.proof);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = TransactionKey.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.transaction = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.proof = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionInfo {
    return {
      key: isSet(object.key) ? TransactionKey.fromJSON(object.key) : undefined,
      transaction: isSet(object.transaction) ? bytesFromBase64(object.transaction) : new Uint8Array(0),
      proof: isSet(object.proof) ? bytesFromBase64(object.proof) : new Uint8Array(0),
    };
  },

  toJSON(message: TransactionInfo): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = TransactionKey.toJSON(message.key);
    }
    if (message.transaction.length !== 0) {
      obj.transaction = base64FromBytes(message.transaction);
    }
    if (message.proof.length !== 0) {
      obj.proof = base64FromBytes(message.proof);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionInfo>, I>>(base?: I): TransactionInfo {
    return TransactionInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionInfo>, I>>(object: I): TransactionInfo {
    const message = createBaseTransactionInfo();
    message.key = (object.key !== undefined && object.key !== null)
      ? TransactionKey.fromPartial(object.key)
      : undefined;
    message.transaction = object.transaction ?? new Uint8Array(0);
    message.proof = object.proof ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgCreateBTCStaking(): MsgCreateBTCStaking {
  return { signer: "", staking_tx: undefined, receiver: "", agent_id: "0" };
}

export const MsgCreateBTCStaking = {
  encode(message: MsgCreateBTCStaking, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.staking_tx !== undefined) {
      TransactionInfo.encode(message.staking_tx, writer.uint32(18).fork()).ldelim();
    }
    if (message.receiver !== "") {
      writer.uint32(26).string(message.receiver);
    }
    if (message.agent_id !== "0") {
      writer.uint32(32).uint64(message.agent_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateBTCStaking {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateBTCStaking();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.staking_tx = TransactionInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.receiver = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.agent_id = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateBTCStaking {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      staking_tx: isSet(object.staking_tx) ? TransactionInfo.fromJSON(object.staking_tx) : undefined,
      receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
      agent_id: isSet(object.agent_id) ? globalThis.String(object.agent_id) : "0",
    };
  },

  toJSON(message: MsgCreateBTCStaking): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.staking_tx !== undefined) {
      obj.staking_tx = TransactionInfo.toJSON(message.staking_tx);
    }
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    if (message.agent_id !== "0") {
      obj.agent_id = message.agent_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateBTCStaking>, I>>(base?: I): MsgCreateBTCStaking {
    return MsgCreateBTCStaking.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateBTCStaking>, I>>(object: I): MsgCreateBTCStaking {
    const message = createBaseMsgCreateBTCStaking();
    message.signer = object.signer ?? "";
    message.staking_tx = (object.staking_tx !== undefined && object.staking_tx !== null)
      ? TransactionInfo.fromPartial(object.staking_tx)
      : undefined;
    message.receiver = object.receiver ?? "";
    message.agent_id = object.agent_id ?? "0";
    return message;
  },
};

function createBaseMsgCreateBTCStakingResponse(): MsgCreateBTCStakingResponse {
  return {};
}

export const MsgCreateBTCStakingResponse = {
  encode(_: MsgCreateBTCStakingResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateBTCStakingResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateBTCStakingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateBTCStakingResponse {
    return {};
  },

  toJSON(_: MsgCreateBTCStakingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateBTCStakingResponse>, I>>(base?: I): MsgCreateBTCStakingResponse {
    return MsgCreateBTCStakingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateBTCStakingResponse>, I>>(_: I): MsgCreateBTCStakingResponse {
    const message = createBaseMsgCreateBTCStakingResponse();
    return message;
  },
};

function createBaseMsgBurnRequest(): MsgBurnRequest {
  return { signer: "", btc_target_address: "", amount: "" };
}

export const MsgBurnRequest = {
  encode(message: MsgBurnRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.btc_target_address !== "") {
      writer.uint32(18).string(message.btc_target_address);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgBurnRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBurnRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.btc_target_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgBurnRequest {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      btc_target_address: isSet(object.btc_target_address) ? globalThis.String(object.btc_target_address) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
    };
  },

  toJSON(message: MsgBurnRequest): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.btc_target_address !== "") {
      obj.btc_target_address = message.btc_target_address;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBurnRequest>, I>>(base?: I): MsgBurnRequest {
    return MsgBurnRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBurnRequest>, I>>(object: I): MsgBurnRequest {
    const message = createBaseMsgBurnRequest();
    message.signer = object.signer ?? "";
    message.btc_target_address = object.btc_target_address ?? "";
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseMsgBurnResponse(): MsgBurnResponse {
  return {};
}

export const MsgBurnResponse = {
  encode(_: MsgBurnResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgBurnResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBurnResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgBurnResponse {
    return {};
  },

  toJSON(_: MsgBurnResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBurnResponse>, I>>(base?: I): MsgBurnResponse {
    return MsgBurnResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBurnResponse>, I>>(_: I): MsgBurnResponse {
    const message = createBaseMsgBurnResponse();
    return message;
  },
};

function createBaseMsgAddReceiver(): MsgAddReceiver {
  return { authority: "", receiver: undefined };
}

export const MsgAddReceiver = {
  encode(message: MsgAddReceiver, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.receiver !== undefined) {
      Receiver.encode(message.receiver, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddReceiver {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddReceiver();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.receiver = Receiver.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddReceiver {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      receiver: isSet(object.receiver) ? Receiver.fromJSON(object.receiver) : undefined,
    };
  },

  toJSON(message: MsgAddReceiver): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.receiver !== undefined) {
      obj.receiver = Receiver.toJSON(message.receiver);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddReceiver>, I>>(base?: I): MsgAddReceiver {
    return MsgAddReceiver.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddReceiver>, I>>(object: I): MsgAddReceiver {
    const message = createBaseMsgAddReceiver();
    message.authority = object.authority ?? "";
    message.receiver = (object.receiver !== undefined && object.receiver !== null)
      ? Receiver.fromPartial(object.receiver)
      : undefined;
    return message;
  },
};

function createBaseMsgAddReceiverResponse(): MsgAddReceiverResponse {
  return {};
}

export const MsgAddReceiverResponse = {
  encode(_: MsgAddReceiverResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddReceiverResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddReceiverResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddReceiverResponse {
    return {};
  },

  toJSON(_: MsgAddReceiverResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddReceiverResponse>, I>>(base?: I): MsgAddReceiverResponse {
    return MsgAddReceiverResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddReceiverResponse>, I>>(_: I): MsgAddReceiverResponse {
    const message = createBaseMsgAddReceiverResponse();
    return message;
  },
};

function createBaseMsgRemoveReceiver(): MsgRemoveReceiver {
  return { authority: "", receiver: "" };
}

export const MsgRemoveReceiver = {
  encode(message: MsgRemoveReceiver, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.receiver !== "") {
      writer.uint32(18).string(message.receiver);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveReceiver {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveReceiver();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.receiver = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveReceiver {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
    };
  },

  toJSON(message: MsgRemoveReceiver): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveReceiver>, I>>(base?: I): MsgRemoveReceiver {
    return MsgRemoveReceiver.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveReceiver>, I>>(object: I): MsgRemoveReceiver {
    const message = createBaseMsgRemoveReceiver();
    message.authority = object.authority ?? "";
    message.receiver = object.receiver ?? "";
    return message;
  },
};

function createBaseMsgRemoveReceiverResponse(): MsgRemoveReceiverResponse {
  return {};
}

export const MsgRemoveReceiverResponse = {
  encode(_: MsgRemoveReceiverResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveReceiverResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveReceiverResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveReceiverResponse {
    return {};
  },

  toJSON(_: MsgRemoveReceiverResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveReceiverResponse>, I>>(base?: I): MsgRemoveReceiverResponse {
    return MsgRemoveReceiverResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveReceiverResponse>, I>>(_: I): MsgRemoveReceiverResponse {
    const message = createBaseMsgRemoveReceiverResponse();
    return message;
  },
};

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams = {
  encode(message: MsgUpdateParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse = {
  encode(_: MsgUpdateParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  CreateBTCStaking(request: MsgCreateBTCStaking): Promise<MsgCreateBTCStakingResponse>;
  Burn(request: MsgBurnRequest): Promise<MsgBurnResponse>;
  AddReceiver(request: MsgAddReceiver): Promise<MsgAddReceiverResponse>;
  RemoveReceiver(request: MsgRemoveReceiver): Promise<MsgRemoveReceiverResponse>;
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}

export const MsgServiceName = "lorenzo.btcstaking.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateBTCStaking = this.CreateBTCStaking.bind(this);
    this.Burn = this.Burn.bind(this);
    this.AddReceiver = this.AddReceiver.bind(this);
    this.RemoveReceiver = this.RemoveReceiver.bind(this);
    this.UpdateParams = this.UpdateParams.bind(this);
  }
  CreateBTCStaking(request: MsgCreateBTCStaking): Promise<MsgCreateBTCStakingResponse> {
    const data = MsgCreateBTCStaking.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateBTCStaking", data);
    return promise.then((data) => MsgCreateBTCStakingResponse.decode(_m0.Reader.create(data)));
  }

  Burn(request: MsgBurnRequest): Promise<MsgBurnResponse> {
    const data = MsgBurnRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Burn", data);
    return promise.then((data) => MsgBurnResponse.decode(_m0.Reader.create(data)));
  }

  AddReceiver(request: MsgAddReceiver): Promise<MsgAddReceiverResponse> {
    const data = MsgAddReceiver.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddReceiver", data);
    return promise.then((data) => MsgAddReceiverResponse.decode(_m0.Reader.create(data)));
  }

  RemoveReceiver(request: MsgRemoveReceiver): Promise<MsgRemoveReceiverResponse> {
    const data = MsgRemoveReceiver.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveReceiver", data);
    return promise.then((data) => MsgRemoveReceiverResponse.decode(_m0.Reader.create(data)));
  }

  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
