// @generated by protoc-gen-es v1.0.0
// @generated from file lorenzo/btcstaking/v1/query.proto (package lorenzo.btcstaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Params } from "./params_pb.js";
import type { BTCStakingRecord } from "./staking_record_pb.js";

/**
 * @generated from message lorenzo.btcstaking.v1.QueryParamsRequest
 */
export declare class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.btcstaking.v1.QueryParamsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest;

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean;
}

/**
 * @generated from message lorenzo.btcstaking.v1.QueryParamsResponse
 */
export declare class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: lorenzo.btcstaking.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.btcstaking.v1.QueryParamsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse;

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean;
}

/**
 * @generated from message lorenzo.btcstaking.v1.StakingRecordDisplay
 */
export declare class StakingRecordDisplay extends Message<StakingRecordDisplay> {
  /**
   * @generated from field: string tx_id = 1;
   */
  txId: string;

  /**
   * @generated from field: string receiver_address = 2;
   */
  receiverAddress: string;

  /**
   * @generated from field: string amount = 3;
   */
  amount: string;

  /**
   * @generated from field: string agent_name = 4;
   */
  agentName: string;

  /**
   * @generated from field: string agent_btc_addr = 5;
   */
  agentBtcAddr: string;

  /**
   * @generated from field: uint32 chain_id = 6;
   */
  chainId: number;

  constructor(data?: PartialMessage<StakingRecordDisplay>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.btcstaking.v1.StakingRecordDisplay";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakingRecordDisplay;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakingRecordDisplay;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakingRecordDisplay;

  static equals(a: StakingRecordDisplay | PlainMessage<StakingRecordDisplay> | undefined, b: StakingRecordDisplay | PlainMessage<StakingRecordDisplay> | undefined): boolean;
}

/**
 * @generated from message lorenzo.btcstaking.v1.QueryStakingRecordRequest
 */
export declare class QueryStakingRecordRequest extends Message<QueryStakingRecordRequest> {
  /**
   * @generated from field: bytes txHash = 1;
   */
  txHash: Uint8Array;

  constructor(data?: PartialMessage<QueryStakingRecordRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.btcstaking.v1.QueryStakingRecordRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStakingRecordRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStakingRecordRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStakingRecordRequest;

  static equals(a: QueryStakingRecordRequest | PlainMessage<QueryStakingRecordRequest> | undefined, b: QueryStakingRecordRequest | PlainMessage<QueryStakingRecordRequest> | undefined): boolean;
}

/**
 * @generated from message lorenzo.btcstaking.v1.QueryStakingRecordResponse
 */
export declare class QueryStakingRecordResponse extends Message<QueryStakingRecordResponse> {
  /**
   * @generated from field: lorenzo.btcstaking.v1.BTCStakingRecord record = 1;
   */
  record?: BTCStakingRecord;

  constructor(data?: PartialMessage<QueryStakingRecordResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.btcstaking.v1.QueryStakingRecordResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStakingRecordResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStakingRecordResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStakingRecordResponse;

  static equals(a: QueryStakingRecordResponse | PlainMessage<QueryStakingRecordResponse> | undefined, b: QueryStakingRecordResponse | PlainMessage<QueryStakingRecordResponse> | undefined): boolean;
}

