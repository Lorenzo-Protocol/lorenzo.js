// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: lorenzo/plan/v1/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params } from "./params";
import { PlanStatus, planStatusFromJSON, planStatusToJSON } from "./plan";

/** MsgUpdateParams is the request type for the Msg/UpdateParams RPC method. */
export interface MsgUpdateParams {
  /**
   * authority is the address of the governance account.
   * just FYI: cosmos.AddressString marks that this field should use type alias
   * for AddressString instead of string, but the functionality is not yet
   * implemented in cosmos-proto
   */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params?: Params | undefined;
}

/**
 * MsgUpdateParamsResponse is the response type for the Msg/UpdateParams RPC
 * method.
 */
export interface MsgUpdateParamsResponse {
}

/** MsgUpgradePlan is the request type for the Msg/UpgradePlan RPC method. */
export interface MsgUpgradePlan {
  /** implementation is the new yat logic contract address */
  implementation: string;
  /**
   * authority is the address of the governance account.
   * just FYI: cosmos.AddressString marks that this field should use type alias
   * for AddressString instead of string, but the functionality is not yet
   * implemented in cosmos-proto
   */
  authority: string;
}

/** MsgUpgradeYATResponse is the response type for the Msg/UpgradeYAT RPC method. */
export interface MsgUpgradePlanResponse {
}

/** MsgCreatePlan is the request type for the Msg/CreatePlan RPC method. */
export interface MsgCreatePlan {
  /** name is the name of the plan */
  name: string;
  /** plan_desc_uri is the URI of the plan description */
  plan_desc_uri: string;
  /** agent_id is the unique identifier of the agent */
  agent_id: string;
  /** plan_start_time is the start time of the plan */
  plan_start_time: string;
  /** period_time is the period time of the plan */
  period_time: string;
  /** yat_contract_address is the address of the yat contract */
  yat_contract_address: string;
  /** sender is the address of the allowed sender */
  sender: string;
}

/** MsgCreatePlanResponse is the response type for the Msg/CreatePlan RPC method. */
export interface MsgCreatePlanResponse {
  /** id is the unique identifier of the plan */
  id: string;
}

/** MsgSetMerkleRoot is the request type for the Msg/SetMerkleRoot RPC method. */
export interface MsgSetMerkleRoot {
  /** plan_id is the unique identifier of the plan */
  plan_id: string;
  /** round_id is the unique identifier of the round */
  round_id: string;
  /** merkle_root is the merkle root of the plan */
  merkle_root: string;
  /** sender is the address of the allowed sender */
  sender: string;
}

/**
 * MsgSetMerkleRootResponse is the response type for the Msg/SetMerkleRoot RPC
 * method.
 */
export interface MsgSetMerkleRootResponse {
}

/** MsgClaims is the request type for the Msg/Claims RPC method. */
export interface MsgClaims {
  /** plan_id is the unique identifier of the plan */
  plan_id: string;
  /** receiver is the address of the receiver */
  receiver: string;
  /** round_id is the unique identifier of the round */
  round_id: string;
  /** amount is the amount of the claim */
  amount: string;
  /** merkle_proof is the merkle proof of the claim */
  merkle_proof: string;
  /** sender is the address of the governance account or module admin */
  sender: string;
}

/** MsgClaimsResponse is the response type for the Msg/Claims RPC method. */
export interface MsgClaimsResponse {
}

/**
 * MsgUpdatePlanStatus is the request type for the Msg/UpdatePlanStatus RPC
 * method.
 */
export interface MsgUpdatePlanStatus {
  /** plan_id is the unique identifier of the plan */
  plan_id: string;
  /** status is the status of the plan */
  status: PlanStatus;
  /** sender is the address of the allowed sender */
  sender: string;
}

/**
 * MsgUpdatePlanStatusResponse is the response type for the Msg/UpdatePlanStatus
 * RPC method.
 */
export interface MsgUpdatePlanStatusResponse {
}

/** MsgCreateYAT is the request type for the Msg/CreateYAT RPC method. */
export interface MsgCreateYAT {
  /** name is the name of the yat contract */
  name: string;
  /** symbol is the symbol of the yat contract */
  symbol: string;
  /** sender is the address of the allowed sender */
  sender: string;
}

/** MsgCreateYATResponse is the response type for the Msg/CreateYAT RPC method. */
export interface MsgCreateYATResponse {
  /** contract_address is the address of the yat contract */
  contract_address: string;
}

/** MsgSetMinter is the request type for the Msg/SetMinter RPC method. */
export interface MsgSetMinter {
  /** minter is the address of the minter */
  minter: string;
  /** contract_address is the address of the yat contract */
  contract_address: string;
  /** sender is the address of the allowed sender */
  sender: string;
}

/** MsgSetMinterResponse is the response type for the Msg/SetMinter RPC method. */
export interface MsgSetMinterResponse {
}

/** MsgRemoveMinter is the request type for the Msg/RemoveMinter RPC method. */
export interface MsgRemoveMinter {
  /** minter is the address of the minter */
  minter: string;
  /** contract_address is the address of the yat contract */
  contract_address: string;
  /** sender is the address of the allowed sender */
  sender: string;
}

/**
 * MsgRemoveMinterResponse is the response type for the Msg/RemoveMinter RPC
 * method.
 */
export interface MsgRemoveMinterResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams = {
  encode(message: MsgUpdateParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse = {
  encode(_: MsgUpdateParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgUpgradePlan(): MsgUpgradePlan {
  return { implementation: "", authority: "" };
}

export const MsgUpgradePlan = {
  encode(message: MsgUpgradePlan, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.implementation !== "") {
      writer.uint32(10).string(message.implementation);
    }
    if (message.authority !== "") {
      writer.uint32(18).string(message.authority);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpgradePlan {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpgradePlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.implementation = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.authority = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpgradePlan {
    return {
      implementation: isSet(object.implementation) ? globalThis.String(object.implementation) : "",
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
    };
  },

  toJSON(message: MsgUpgradePlan): unknown {
    const obj: any = {};
    if (message.implementation !== "") {
      obj.implementation = message.implementation;
    }
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpgradePlan>, I>>(base?: I): MsgUpgradePlan {
    return MsgUpgradePlan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpgradePlan>, I>>(object: I): MsgUpgradePlan {
    const message = createBaseMsgUpgradePlan();
    message.implementation = object.implementation ?? "";
    message.authority = object.authority ?? "";
    return message;
  },
};

function createBaseMsgUpgradePlanResponse(): MsgUpgradePlanResponse {
  return {};
}

export const MsgUpgradePlanResponse = {
  encode(_: MsgUpgradePlanResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpgradePlanResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpgradePlanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpgradePlanResponse {
    return {};
  },

  toJSON(_: MsgUpgradePlanResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpgradePlanResponse>, I>>(base?: I): MsgUpgradePlanResponse {
    return MsgUpgradePlanResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpgradePlanResponse>, I>>(_: I): MsgUpgradePlanResponse {
    const message = createBaseMsgUpgradePlanResponse();
    return message;
  },
};

function createBaseMsgCreatePlan(): MsgCreatePlan {
  return {
    name: "",
    plan_desc_uri: "",
    agent_id: "0",
    plan_start_time: "0",
    period_time: "0",
    yat_contract_address: "",
    sender: "",
  };
}

export const MsgCreatePlan = {
  encode(message: MsgCreatePlan, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.plan_desc_uri !== "") {
      writer.uint32(18).string(message.plan_desc_uri);
    }
    if (message.agent_id !== "0") {
      writer.uint32(24).uint64(message.agent_id);
    }
    if (message.plan_start_time !== "0") {
      writer.uint32(32).uint64(message.plan_start_time);
    }
    if (message.period_time !== "0") {
      writer.uint32(40).uint64(message.period_time);
    }
    if (message.yat_contract_address !== "") {
      writer.uint32(50).string(message.yat_contract_address);
    }
    if (message.sender !== "") {
      writer.uint32(58).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreatePlan {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.plan_desc_uri = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.agent_id = longToString(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.plan_start_time = longToString(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.period_time = longToString(reader.uint64() as Long);
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.yat_contract_address = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreatePlan {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      plan_desc_uri: isSet(object.plan_desc_uri) ? globalThis.String(object.plan_desc_uri) : "",
      agent_id: isSet(object.agent_id) ? globalThis.String(object.agent_id) : "0",
      plan_start_time: isSet(object.plan_start_time) ? globalThis.String(object.plan_start_time) : "0",
      period_time: isSet(object.period_time) ? globalThis.String(object.period_time) : "0",
      yat_contract_address: isSet(object.yat_contract_address) ? globalThis.String(object.yat_contract_address) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgCreatePlan): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.plan_desc_uri !== "") {
      obj.plan_desc_uri = message.plan_desc_uri;
    }
    if (message.agent_id !== "0") {
      obj.agent_id = message.agent_id;
    }
    if (message.plan_start_time !== "0") {
      obj.plan_start_time = message.plan_start_time;
    }
    if (message.period_time !== "0") {
      obj.period_time = message.period_time;
    }
    if (message.yat_contract_address !== "") {
      obj.yat_contract_address = message.yat_contract_address;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreatePlan>, I>>(base?: I): MsgCreatePlan {
    return MsgCreatePlan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreatePlan>, I>>(object: I): MsgCreatePlan {
    const message = createBaseMsgCreatePlan();
    message.name = object.name ?? "";
    message.plan_desc_uri = object.plan_desc_uri ?? "";
    message.agent_id = object.agent_id ?? "0";
    message.plan_start_time = object.plan_start_time ?? "0";
    message.period_time = object.period_time ?? "0";
    message.yat_contract_address = object.yat_contract_address ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgCreatePlanResponse(): MsgCreatePlanResponse {
  return { id: "0" };
}

export const MsgCreatePlanResponse = {
  encode(message: MsgCreatePlanResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "0") {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreatePlanResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePlanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreatePlanResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "0" };
  },

  toJSON(message: MsgCreatePlanResponse): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreatePlanResponse>, I>>(base?: I): MsgCreatePlanResponse {
    return MsgCreatePlanResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreatePlanResponse>, I>>(object: I): MsgCreatePlanResponse {
    const message = createBaseMsgCreatePlanResponse();
    message.id = object.id ?? "0";
    return message;
  },
};

function createBaseMsgSetMerkleRoot(): MsgSetMerkleRoot {
  return { plan_id: "0", round_id: "", merkle_root: "", sender: "" };
}

export const MsgSetMerkleRoot = {
  encode(message: MsgSetMerkleRoot, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.plan_id !== "0") {
      writer.uint32(8).uint64(message.plan_id);
    }
    if (message.round_id !== "") {
      writer.uint32(18).string(message.round_id);
    }
    if (message.merkle_root !== "") {
      writer.uint32(26).string(message.merkle_root);
    }
    if (message.sender !== "") {
      writer.uint32(34).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetMerkleRoot {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetMerkleRoot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.plan_id = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.round_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.merkle_root = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetMerkleRoot {
    return {
      plan_id: isSet(object.plan_id) ? globalThis.String(object.plan_id) : "0",
      round_id: isSet(object.round_id) ? globalThis.String(object.round_id) : "",
      merkle_root: isSet(object.merkle_root) ? globalThis.String(object.merkle_root) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgSetMerkleRoot): unknown {
    const obj: any = {};
    if (message.plan_id !== "0") {
      obj.plan_id = message.plan_id;
    }
    if (message.round_id !== "") {
      obj.round_id = message.round_id;
    }
    if (message.merkle_root !== "") {
      obj.merkle_root = message.merkle_root;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetMerkleRoot>, I>>(base?: I): MsgSetMerkleRoot {
    return MsgSetMerkleRoot.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetMerkleRoot>, I>>(object: I): MsgSetMerkleRoot {
    const message = createBaseMsgSetMerkleRoot();
    message.plan_id = object.plan_id ?? "0";
    message.round_id = object.round_id ?? "";
    message.merkle_root = object.merkle_root ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgSetMerkleRootResponse(): MsgSetMerkleRootResponse {
  return {};
}

export const MsgSetMerkleRootResponse = {
  encode(_: MsgSetMerkleRootResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetMerkleRootResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetMerkleRootResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetMerkleRootResponse {
    return {};
  },

  toJSON(_: MsgSetMerkleRootResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetMerkleRootResponse>, I>>(base?: I): MsgSetMerkleRootResponse {
    return MsgSetMerkleRootResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetMerkleRootResponse>, I>>(_: I): MsgSetMerkleRootResponse {
    const message = createBaseMsgSetMerkleRootResponse();
    return message;
  },
};

function createBaseMsgClaims(): MsgClaims {
  return { plan_id: "0", receiver: "", round_id: "", amount: "", merkle_proof: "", sender: "" };
}

export const MsgClaims = {
  encode(message: MsgClaims, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.plan_id !== "0") {
      writer.uint32(8).uint64(message.plan_id);
    }
    if (message.receiver !== "") {
      writer.uint32(18).string(message.receiver);
    }
    if (message.round_id !== "") {
      writer.uint32(26).string(message.round_id);
    }
    if (message.amount !== "") {
      writer.uint32(34).string(message.amount);
    }
    if (message.merkle_proof !== "") {
      writer.uint32(42).string(message.merkle_proof);
    }
    if (message.sender !== "") {
      writer.uint32(50).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgClaims {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaims();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.plan_id = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.receiver = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.round_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.amount = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.merkle_proof = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgClaims {
    return {
      plan_id: isSet(object.plan_id) ? globalThis.String(object.plan_id) : "0",
      receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
      round_id: isSet(object.round_id) ? globalThis.String(object.round_id) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      merkle_proof: isSet(object.merkle_proof) ? globalThis.String(object.merkle_proof) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgClaims): unknown {
    const obj: any = {};
    if (message.plan_id !== "0") {
      obj.plan_id = message.plan_id;
    }
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    if (message.round_id !== "") {
      obj.round_id = message.round_id;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.merkle_proof !== "") {
      obj.merkle_proof = message.merkle_proof;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgClaims>, I>>(base?: I): MsgClaims {
    return MsgClaims.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgClaims>, I>>(object: I): MsgClaims {
    const message = createBaseMsgClaims();
    message.plan_id = object.plan_id ?? "0";
    message.receiver = object.receiver ?? "";
    message.round_id = object.round_id ?? "";
    message.amount = object.amount ?? "";
    message.merkle_proof = object.merkle_proof ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgClaimsResponse(): MsgClaimsResponse {
  return {};
}

export const MsgClaimsResponse = {
  encode(_: MsgClaimsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgClaimsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaimsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgClaimsResponse {
    return {};
  },

  toJSON(_: MsgClaimsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgClaimsResponse>, I>>(base?: I): MsgClaimsResponse {
    return MsgClaimsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgClaimsResponse>, I>>(_: I): MsgClaimsResponse {
    const message = createBaseMsgClaimsResponse();
    return message;
  },
};

function createBaseMsgUpdatePlanStatus(): MsgUpdatePlanStatus {
  return { plan_id: "0", status: 0, sender: "" };
}

export const MsgUpdatePlanStatus = {
  encode(message: MsgUpdatePlanStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.plan_id !== "0") {
      writer.uint32(8).uint64(message.plan_id);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdatePlanStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdatePlanStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.plan_id = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdatePlanStatus {
    return {
      plan_id: isSet(object.plan_id) ? globalThis.String(object.plan_id) : "0",
      status: isSet(object.status) ? planStatusFromJSON(object.status) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgUpdatePlanStatus): unknown {
    const obj: any = {};
    if (message.plan_id !== "0") {
      obj.plan_id = message.plan_id;
    }
    if (message.status !== 0) {
      obj.status = planStatusToJSON(message.status);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdatePlanStatus>, I>>(base?: I): MsgUpdatePlanStatus {
    return MsgUpdatePlanStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdatePlanStatus>, I>>(object: I): MsgUpdatePlanStatus {
    const message = createBaseMsgUpdatePlanStatus();
    message.plan_id = object.plan_id ?? "0";
    message.status = object.status ?? 0;
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgUpdatePlanStatusResponse(): MsgUpdatePlanStatusResponse {
  return {};
}

export const MsgUpdatePlanStatusResponse = {
  encode(_: MsgUpdatePlanStatusResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdatePlanStatusResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdatePlanStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdatePlanStatusResponse {
    return {};
  },

  toJSON(_: MsgUpdatePlanStatusResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdatePlanStatusResponse>, I>>(base?: I): MsgUpdatePlanStatusResponse {
    return MsgUpdatePlanStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdatePlanStatusResponse>, I>>(_: I): MsgUpdatePlanStatusResponse {
    const message = createBaseMsgUpdatePlanStatusResponse();
    return message;
  },
};

function createBaseMsgCreateYAT(): MsgCreateYAT {
  return { name: "", symbol: "", sender: "" };
}

export const MsgCreateYAT = {
  encode(message: MsgCreateYAT, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.symbol !== "") {
      writer.uint32(18).string(message.symbol);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateYAT {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateYAT();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.symbol = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateYAT {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgCreateYAT): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateYAT>, I>>(base?: I): MsgCreateYAT {
    return MsgCreateYAT.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateYAT>, I>>(object: I): MsgCreateYAT {
    const message = createBaseMsgCreateYAT();
    message.name = object.name ?? "";
    message.symbol = object.symbol ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgCreateYATResponse(): MsgCreateYATResponse {
  return { contract_address: "" };
}

export const MsgCreateYATResponse = {
  encode(message: MsgCreateYATResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateYATResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateYATResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateYATResponse {
    return { contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "" };
  },

  toJSON(message: MsgCreateYATResponse): unknown {
    const obj: any = {};
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateYATResponse>, I>>(base?: I): MsgCreateYATResponse {
    return MsgCreateYATResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateYATResponse>, I>>(object: I): MsgCreateYATResponse {
    const message = createBaseMsgCreateYATResponse();
    message.contract_address = object.contract_address ?? "";
    return message;
  },
};

function createBaseMsgSetMinter(): MsgSetMinter {
  return { minter: "", contract_address: "", sender: "" };
}

export const MsgSetMinter = {
  encode(message: MsgSetMinter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.minter !== "") {
      writer.uint32(10).string(message.minter);
    }
    if (message.contract_address !== "") {
      writer.uint32(18).string(message.contract_address);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetMinter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetMinter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.minter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contract_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetMinter {
    return {
      minter: isSet(object.minter) ? globalThis.String(object.minter) : "",
      contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgSetMinter): unknown {
    const obj: any = {};
    if (message.minter !== "") {
      obj.minter = message.minter;
    }
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetMinter>, I>>(base?: I): MsgSetMinter {
    return MsgSetMinter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetMinter>, I>>(object: I): MsgSetMinter {
    const message = createBaseMsgSetMinter();
    message.minter = object.minter ?? "";
    message.contract_address = object.contract_address ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgSetMinterResponse(): MsgSetMinterResponse {
  return {};
}

export const MsgSetMinterResponse = {
  encode(_: MsgSetMinterResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetMinterResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetMinterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetMinterResponse {
    return {};
  },

  toJSON(_: MsgSetMinterResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetMinterResponse>, I>>(base?: I): MsgSetMinterResponse {
    return MsgSetMinterResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetMinterResponse>, I>>(_: I): MsgSetMinterResponse {
    const message = createBaseMsgSetMinterResponse();
    return message;
  },
};

function createBaseMsgRemoveMinter(): MsgRemoveMinter {
  return { minter: "", contract_address: "", sender: "" };
}

export const MsgRemoveMinter = {
  encode(message: MsgRemoveMinter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.minter !== "") {
      writer.uint32(10).string(message.minter);
    }
    if (message.contract_address !== "") {
      writer.uint32(18).string(message.contract_address);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveMinter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveMinter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.minter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contract_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveMinter {
    return {
      minter: isSet(object.minter) ? globalThis.String(object.minter) : "",
      contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgRemoveMinter): unknown {
    const obj: any = {};
    if (message.minter !== "") {
      obj.minter = message.minter;
    }
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveMinter>, I>>(base?: I): MsgRemoveMinter {
    return MsgRemoveMinter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveMinter>, I>>(object: I): MsgRemoveMinter {
    const message = createBaseMsgRemoveMinter();
    message.minter = object.minter ?? "";
    message.contract_address = object.contract_address ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgRemoveMinterResponse(): MsgRemoveMinterResponse {
  return {};
}

export const MsgRemoveMinterResponse = {
  encode(_: MsgRemoveMinterResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveMinterResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveMinterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveMinterResponse {
    return {};
  },

  toJSON(_: MsgRemoveMinterResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveMinterResponse>, I>>(base?: I): MsgRemoveMinterResponse {
    return MsgRemoveMinterResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveMinterResponse>, I>>(_: I): MsgRemoveMinterResponse {
    const message = createBaseMsgRemoveMinterResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /** UpdateParams defines a method for updating the plan parameters. */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  /** UpgradePlan defines a governance operation for upgrading an Plan contract */
  UpgradePlan(request: MsgUpgradePlan): Promise<MsgUpgradePlanResponse>;
  /** CreatePlan defines a method for creating a new plan. */
  CreatePlan(request: MsgCreatePlan): Promise<MsgCreatePlanResponse>;
  /** SetMerkleRoot defines a method for setting the merkle root of the plan. */
  SetMerkleRoot(request: MsgSetMerkleRoot): Promise<MsgSetMerkleRootResponse>;
  /** CreateClaim defines a method for claims rewards to sender. */
  Claims(request: MsgClaims): Promise<MsgClaimsResponse>;
  /** UpdatePlanStatus defines a method for updating the plan status. */
  UpdatePlanStatus(request: MsgUpdatePlanStatus): Promise<MsgUpdatePlanStatusResponse>;
  /** CreateYAT defines a method for creating a new YAT contract. */
  CreateYAT(request: MsgCreateYAT): Promise<MsgCreateYATResponse>;
  /** SetMinter defines a method for setting minter of the YAT contract. */
  SetMinter(request: MsgSetMinter): Promise<MsgSetMinterResponse>;
  /** RemoveMinter defines a method for removing minter of the YAT contract. */
  RemoveMinter(request: MsgRemoveMinter): Promise<MsgRemoveMinterResponse>;
}

export const MsgServiceName = "lorenzo.plan.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.UpgradePlan = this.UpgradePlan.bind(this);
    this.CreatePlan = this.CreatePlan.bind(this);
    this.SetMerkleRoot = this.SetMerkleRoot.bind(this);
    this.Claims = this.Claims.bind(this);
    this.UpdatePlanStatus = this.UpdatePlanStatus.bind(this);
    this.CreateYAT = this.CreateYAT.bind(this);
    this.SetMinter = this.SetMinter.bind(this);
    this.RemoveMinter = this.RemoveMinter.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(_m0.Reader.create(data)));
  }

  UpgradePlan(request: MsgUpgradePlan): Promise<MsgUpgradePlanResponse> {
    const data = MsgUpgradePlan.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpgradePlan", data);
    return promise.then((data) => MsgUpgradePlanResponse.decode(_m0.Reader.create(data)));
  }

  CreatePlan(request: MsgCreatePlan): Promise<MsgCreatePlanResponse> {
    const data = MsgCreatePlan.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreatePlan", data);
    return promise.then((data) => MsgCreatePlanResponse.decode(_m0.Reader.create(data)));
  }

  SetMerkleRoot(request: MsgSetMerkleRoot): Promise<MsgSetMerkleRootResponse> {
    const data = MsgSetMerkleRoot.encode(request).finish();
    const promise = this.rpc.request(this.service, "SetMerkleRoot", data);
    return promise.then((data) => MsgSetMerkleRootResponse.decode(_m0.Reader.create(data)));
  }

  Claims(request: MsgClaims): Promise<MsgClaimsResponse> {
    const data = MsgClaims.encode(request).finish();
    const promise = this.rpc.request(this.service, "Claims", data);
    return promise.then((data) => MsgClaimsResponse.decode(_m0.Reader.create(data)));
  }

  UpdatePlanStatus(request: MsgUpdatePlanStatus): Promise<MsgUpdatePlanStatusResponse> {
    const data = MsgUpdatePlanStatus.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdatePlanStatus", data);
    return promise.then((data) => MsgUpdatePlanStatusResponse.decode(_m0.Reader.create(data)));
  }

  CreateYAT(request: MsgCreateYAT): Promise<MsgCreateYATResponse> {
    const data = MsgCreateYAT.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateYAT", data);
    return promise.then((data) => MsgCreateYATResponse.decode(_m0.Reader.create(data)));
  }

  SetMinter(request: MsgSetMinter): Promise<MsgSetMinterResponse> {
    const data = MsgSetMinter.encode(request).finish();
    const promise = this.rpc.request(this.service, "SetMinter", data);
    return promise.then((data) => MsgSetMinterResponse.decode(_m0.Reader.create(data)));
  }

  RemoveMinter(request: MsgRemoveMinter): Promise<MsgRemoveMinterResponse> {
    const data = MsgRemoveMinter.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveMinter", data);
    return promise.then((data) => MsgRemoveMinterResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
