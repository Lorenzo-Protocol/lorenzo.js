// @generated by protoc-gen-es v1.0.0
// @generated from file lorenzo/plan/v1/plan.proto (package lorenzo.plan.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum lorenzo.plan.v1.PlanStatus
 */
export declare enum PlanStatus {
  /**
   * @generated from enum value: Pause = 0;
   */
  Pause = 0,

  /**
   * @generated from enum value: Unpause = 1;
   */
  Unpause = 1,
}

/**
 * Plan defines the details of a project
 *
 * @generated from message lorenzo.plan.v1.Plan
 */
export declare class Plan extends Message<Plan> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id: bigint;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string plan_desc_uri = 3;
   */
  planDescUri: string;

  /**
   * @generated from field: uint64 agent_id = 4;
   */
  agentId: bigint;

  /**
   * @generated from field: uint64 plan_start_time = 5;
   */
  planStartTime: bigint;

  /**
   * @generated from field: uint64 period_time = 6;
   */
  periodTime: bigint;

  /**
   * @generated from field: string yat_contract_address = 7;
   */
  yatContractAddress: string;

  /**
   * @generated from field: string contract_address = 8;
   */
  contractAddress: string;

  /**
   * @generated from field: lorenzo.plan.v1.PlanStatus enabled = 9;
   */
  enabled: PlanStatus;

  constructor(data?: PartialMessage<Plan>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.Plan";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plan;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plan;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plan;

  static equals(a: Plan | PlainMessage<Plan> | undefined, b: Plan | PlainMessage<Plan> | undefined): boolean;
}

