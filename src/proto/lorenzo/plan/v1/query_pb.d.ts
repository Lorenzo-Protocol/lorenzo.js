// @generated by protoc-gen-es v1.0.0
// @generated from file lorenzo/plan/v1/query.proto (package lorenzo.plan.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Params } from "./params_pb.js";
import type { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import type { Plan } from "./plan_pb.js";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message lorenzo.plan.v1.QueryParamsRequest
 */
export declare class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.QueryParamsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest;

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean;
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message lorenzo.plan.v1.QueryParamsResponse
 */
export declare class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: lorenzo.plan.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.QueryParamsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse;

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean;
}

/**
 * PlansRequest is the request type for the Query.Plans RPC method.
 *
 * @generated from message lorenzo.plan.v1.QueryPlansRequest
 */
export declare class QueryPlansRequest extends Message<QueryPlansRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPlansRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.QueryPlansRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPlansRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPlansRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPlansRequest;

  static equals(a: QueryPlansRequest | PlainMessage<QueryPlansRequest> | undefined, b: QueryPlansRequest | PlainMessage<QueryPlansRequest> | undefined): boolean;
}

/**
 * PlansResponse is the response type for the Query.Plans RPC method.
 *
 * @generated from message lorenzo.plan.v1.QueryPlansResponse
 */
export declare class QueryPlansResponse extends Message<QueryPlansResponse> {
  /**
   * @generated from field: repeated lorenzo.plan.v1.Plan plans = 1;
   */
  plans: Plan[];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryPlansResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.QueryPlansResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPlansResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPlansResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPlansResponse;

  static equals(a: QueryPlansResponse | PlainMessage<QueryPlansResponse> | undefined, b: QueryPlansResponse | PlainMessage<QueryPlansResponse> | undefined): boolean;
}

/**
 * PlanRequest is the request type for the Query.Plan RPC method.
 *
 * @generated from message lorenzo.plan.v1.QueryPlanRequest
 */
export declare class QueryPlanRequest extends Message<QueryPlanRequest> {
  /**
   * id is the unique identifier of the plan
   *
   * @generated from field: uint64 id = 1;
   */
  id: bigint;

  constructor(data?: PartialMessage<QueryPlanRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.QueryPlanRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPlanRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPlanRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPlanRequest;

  static equals(a: QueryPlanRequest | PlainMessage<QueryPlanRequest> | undefined, b: QueryPlanRequest | PlainMessage<QueryPlanRequest> | undefined): boolean;
}

/**
 * PlanResponse is the response type for the Query.Plan RPC method.
 *
 * @generated from message lorenzo.plan.v1.QueryPlanResponse
 */
export declare class QueryPlanResponse extends Message<QueryPlanResponse> {
  /**
   * @generated from field: lorenzo.plan.v1.Plan plan = 1;
   */
  plan?: Plan;

  constructor(data?: PartialMessage<QueryPlanResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.QueryPlanResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPlanResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPlanResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPlanResponse;

  static equals(a: QueryPlanResponse | PlainMessage<QueryPlanResponse> | undefined, b: QueryPlanResponse | PlainMessage<QueryPlanResponse> | undefined): boolean;
}

/**
 * ClaimLeafNodeRequest is the request type for the Query.ClaimLeafNode RPC
 * method.
 *
 * @generated from message lorenzo.plan.v1.QueryClaimLeafNodeRequest
 */
export declare class QueryClaimLeafNodeRequest extends Message<QueryClaimLeafNodeRequest> {
  /**
   * id is the unique identifier of the plan
   *
   * @generated from field: uint64 id = 1;
   */
  id: bigint;

  /**
   * round_id is the unique identifier of the round
   *
   * @generated from field: string round_id = 2;
   */
  roundId: string;

  /**
   * leaf_node is the leaf node to claim
   *
   * @generated from field: string leaf_node = 3;
   */
  leafNode: string;

  constructor(data?: PartialMessage<QueryClaimLeafNodeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.QueryClaimLeafNodeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClaimLeafNodeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClaimLeafNodeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClaimLeafNodeRequest;

  static equals(a: QueryClaimLeafNodeRequest | PlainMessage<QueryClaimLeafNodeRequest> | undefined, b: QueryClaimLeafNodeRequest | PlainMessage<QueryClaimLeafNodeRequest> | undefined): boolean;
}

/**
 * ClaimLeafNodeResponse is the response type for the Query.ClaimLeafNode RPC
 * method.
 *
 * @generated from message lorenzo.plan.v1.QueryClaimLeafNodeResponse
 */
export declare class QueryClaimLeafNodeResponse extends Message<QueryClaimLeafNodeResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  constructor(data?: PartialMessage<QueryClaimLeafNodeResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.QueryClaimLeafNodeResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClaimLeafNodeResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClaimLeafNodeResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClaimLeafNodeResponse;

  static equals(a: QueryClaimLeafNodeResponse | PlainMessage<QueryClaimLeafNodeResponse> | undefined, b: QueryClaimLeafNodeResponse | PlainMessage<QueryClaimLeafNodeResponse> | undefined): boolean;
}

