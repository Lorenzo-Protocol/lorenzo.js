// @generated by protoc-gen-es v1.0.0
// @generated from file lorenzo/plan/v1/tx.proto (package lorenzo.plan.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Params } from "./params_pb.js";
import type { PlanStatus } from "./plan_pb.js";

/**
 * MsgUpdateParams is the request type for the Msg/UpdateParams RPC method.
 *
 * @generated from message lorenzo.plan.v1.MsgUpdateParams
 */
export declare class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   * just FYI: cosmos.AddressString marks that this field should use type alias
   * for AddressString instead of string, but the functionality is not yet
   * implemented in cosmos-proto
   *
   * @generated from field: string authority = 1;
   */
  authority: string;

  /**
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: lorenzo.plan.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgUpdateParams";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams;

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean;
}

/**
 * MsgUpdateParamsResponse is the response type for the Msg/UpdateParams RPC
 * method.
 *
 * @generated from message lorenzo.plan.v1.MsgUpdateParamsResponse
 */
export declare class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse;

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean;
}

/**
 * MsgUpgradePlan is the request type for the Msg/UpgradePlan RPC method.
 *
 * @generated from message lorenzo.plan.v1.MsgUpgradePlan
 */
export declare class MsgUpgradePlan extends Message<MsgUpgradePlan> {
  /**
   * implementation is the new yat logic contract address
   *
   * @generated from field: string implementation = 1;
   */
  implementation: string;

  /**
   * authority is the address of the governance account.
   * just FYI: cosmos.AddressString marks that this field should use type alias
   * for AddressString instead of string, but the functionality is not yet
   * implemented in cosmos-proto
   *
   * @generated from field: string authority = 2;
   */
  authority: string;

  constructor(data?: PartialMessage<MsgUpgradePlan>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgUpgradePlan";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpgradePlan;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpgradePlan;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpgradePlan;

  static equals(a: MsgUpgradePlan | PlainMessage<MsgUpgradePlan> | undefined, b: MsgUpgradePlan | PlainMessage<MsgUpgradePlan> | undefined): boolean;
}

/**
 * MsgUpgradeYATResponse is the response type for the Msg/UpgradeYAT RPC method.
 *
 * @generated from message lorenzo.plan.v1.MsgUpgradePlanResponse
 */
export declare class MsgUpgradePlanResponse extends Message<MsgUpgradePlanResponse> {
  constructor(data?: PartialMessage<MsgUpgradePlanResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgUpgradePlanResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpgradePlanResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpgradePlanResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpgradePlanResponse;

  static equals(a: MsgUpgradePlanResponse | PlainMessage<MsgUpgradePlanResponse> | undefined, b: MsgUpgradePlanResponse | PlainMessage<MsgUpgradePlanResponse> | undefined): boolean;
}

/**
 * MsgCreatePlan is the request type for the Msg/CreatePlan RPC method.
 *
 * @generated from message lorenzo.plan.v1.MsgCreatePlan
 */
export declare class MsgCreatePlan extends Message<MsgCreatePlan> {
  /**
   * name is the name of the plan
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * plan_desc_uri is the URI of the plan description
   *
   * @generated from field: string plan_desc_uri = 2;
   */
  planDescUri: string;

  /**
   * agent_id is the unique identifier of the agent
   *
   * @generated from field: uint64 agent_id = 3;
   */
  agentId: bigint;

  /**
   * plan_start_time is the start time of the plan
   *
   * @generated from field: uint64 plan_start_time = 4;
   */
  planStartTime: bigint;

  /**
   * period_time is the period time of the plan
   *
   * @generated from field: uint64 period_time = 5;
   */
  periodTime: bigint;

  /**
   * yat_contract_address is the address of the yat contract
   *
   * @generated from field: string yat_contract_address = 6;
   */
  yatContractAddress: string;

  /**
   * sender is the address of the allowed sender
   *
   * @generated from field: string sender = 7;
   */
  sender: string;

  constructor(data?: PartialMessage<MsgCreatePlan>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgCreatePlan";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreatePlan;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreatePlan;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreatePlan;

  static equals(a: MsgCreatePlan | PlainMessage<MsgCreatePlan> | undefined, b: MsgCreatePlan | PlainMessage<MsgCreatePlan> | undefined): boolean;
}

/**
 * MsgCreatePlanResponse is the response type for the Msg/CreatePlan RPC method.
 *
 * @generated from message lorenzo.plan.v1.MsgCreatePlanResponse
 */
export declare class MsgCreatePlanResponse extends Message<MsgCreatePlanResponse> {
  /**
   * id is the unique identifier of the plan
   *
   * @generated from field: uint64 id = 1;
   */
  id: bigint;

  constructor(data?: PartialMessage<MsgCreatePlanResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgCreatePlanResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreatePlanResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreatePlanResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreatePlanResponse;

  static equals(a: MsgCreatePlanResponse | PlainMessage<MsgCreatePlanResponse> | undefined, b: MsgCreatePlanResponse | PlainMessage<MsgCreatePlanResponse> | undefined): boolean;
}

/**
 * MsgSetMerkleRoot is the request type for the Msg/SetMerkleRoot RPC method.
 *
 * @generated from message lorenzo.plan.v1.MsgSetMerkleRoot
 */
export declare class MsgSetMerkleRoot extends Message<MsgSetMerkleRoot> {
  /**
   * plan_id is the unique identifier of the plan
   *
   * @generated from field: uint64 plan_id = 1;
   */
  planId: bigint;

  /**
   * round_id is the unique identifier of the round
   *
   * @generated from field: string round_id = 2;
   */
  roundId: string;

  /**
   * merkle_root is the merkle root of the plan
   *
   * @generated from field: string merkle_root = 3;
   */
  merkleRoot: string;

  /**
   * sender is the address of the allowed sender
   *
   * @generated from field: string sender = 4;
   */
  sender: string;

  constructor(data?: PartialMessage<MsgSetMerkleRoot>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgSetMerkleRoot";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetMerkleRoot;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetMerkleRoot;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetMerkleRoot;

  static equals(a: MsgSetMerkleRoot | PlainMessage<MsgSetMerkleRoot> | undefined, b: MsgSetMerkleRoot | PlainMessage<MsgSetMerkleRoot> | undefined): boolean;
}

/**
 * MsgSetMerkleRootResponse is the response type for the Msg/SetMerkleRoot RPC
 * method.
 *
 * @generated from message lorenzo.plan.v1.MsgSetMerkleRootResponse
 */
export declare class MsgSetMerkleRootResponse extends Message<MsgSetMerkleRootResponse> {
  constructor(data?: PartialMessage<MsgSetMerkleRootResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgSetMerkleRootResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetMerkleRootResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetMerkleRootResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetMerkleRootResponse;

  static equals(a: MsgSetMerkleRootResponse | PlainMessage<MsgSetMerkleRootResponse> | undefined, b: MsgSetMerkleRootResponse | PlainMessage<MsgSetMerkleRootResponse> | undefined): boolean;
}

/**
 * MsgClaims is the request type for the Msg/Claims RPC method.
 *
 * @generated from message lorenzo.plan.v1.MsgClaims
 */
export declare class MsgClaims extends Message<MsgClaims> {
  /**
   * plan_id is the unique identifier of the plan
   *
   * @generated from field: uint64 plan_id = 1;
   */
  planId: bigint;

  /**
   * receiver is the address of the receiver
   *
   * @generated from field: string receiver = 2;
   */
  receiver: string;

  /**
   * round_id is the unique identifier of the round
   *
   * @generated from field: string round_id = 3;
   */
  roundId: string;

  /**
   * amount is the amount of the claim
   *
   * @generated from field: string amount = 4;
   */
  amount: string;

  /**
   * merkle_proof is the merkle proof of the claim
   *
   * @generated from field: string merkle_proof = 5;
   */
  merkleProof: string;

  /**
   * sender is the address of the governance account or module admin
   *
   * @generated from field: string sender = 6;
   */
  sender: string;

  constructor(data?: PartialMessage<MsgClaims>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgClaims";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaims;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaims;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaims;

  static equals(a: MsgClaims | PlainMessage<MsgClaims> | undefined, b: MsgClaims | PlainMessage<MsgClaims> | undefined): boolean;
}

/**
 * MsgClaimsResponse is the response type for the Msg/Claims RPC method.
 *
 * @generated from message lorenzo.plan.v1.MsgClaimsResponse
 */
export declare class MsgClaimsResponse extends Message<MsgClaimsResponse> {
  constructor(data?: PartialMessage<MsgClaimsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgClaimsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimsResponse;

  static equals(a: MsgClaimsResponse | PlainMessage<MsgClaimsResponse> | undefined, b: MsgClaimsResponse | PlainMessage<MsgClaimsResponse> | undefined): boolean;
}

/**
 * MsgUpdatePlanStatus is the request type for the Msg/UpdatePlanStatus RPC
 * method.
 *
 * @generated from message lorenzo.plan.v1.MsgUpdatePlanStatus
 */
export declare class MsgUpdatePlanStatus extends Message<MsgUpdatePlanStatus> {
  /**
   * plan_id is the unique identifier of the plan
   *
   * @generated from field: uint64 plan_id = 1;
   */
  planId: bigint;

  /**
   * status is the status of the plan
   *
   * @generated from field: lorenzo.plan.v1.PlanStatus status = 2;
   */
  status: PlanStatus;

  /**
   * sender is the address of the allowed sender
   *
   * @generated from field: string sender = 3;
   */
  sender: string;

  constructor(data?: PartialMessage<MsgUpdatePlanStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgUpdatePlanStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdatePlanStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdatePlanStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdatePlanStatus;

  static equals(a: MsgUpdatePlanStatus | PlainMessage<MsgUpdatePlanStatus> | undefined, b: MsgUpdatePlanStatus | PlainMessage<MsgUpdatePlanStatus> | undefined): boolean;
}

/**
 * MsgUpdatePlanStatusResponse is the response type for the Msg/UpdatePlanStatus
 * RPC method.
 *
 * @generated from message lorenzo.plan.v1.MsgUpdatePlanStatusResponse
 */
export declare class MsgUpdatePlanStatusResponse extends Message<MsgUpdatePlanStatusResponse> {
  constructor(data?: PartialMessage<MsgUpdatePlanStatusResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgUpdatePlanStatusResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdatePlanStatusResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdatePlanStatusResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdatePlanStatusResponse;

  static equals(a: MsgUpdatePlanStatusResponse | PlainMessage<MsgUpdatePlanStatusResponse> | undefined, b: MsgUpdatePlanStatusResponse | PlainMessage<MsgUpdatePlanStatusResponse> | undefined): boolean;
}

/**
 * MsgCreateYAT is the request type for the Msg/CreateYAT RPC method.
 *
 * @generated from message lorenzo.plan.v1.MsgCreateYAT
 */
export declare class MsgCreateYAT extends Message<MsgCreateYAT> {
  /**
   * name is the name of the yat contract
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * symbol is the symbol of the yat contract
   *
   * @generated from field: string symbol = 2;
   */
  symbol: string;

  /**
   * sender is the address of the allowed sender
   *
   * @generated from field: string sender = 3;
   */
  sender: string;

  constructor(data?: PartialMessage<MsgCreateYAT>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgCreateYAT";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateYAT;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateYAT;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateYAT;

  static equals(a: MsgCreateYAT | PlainMessage<MsgCreateYAT> | undefined, b: MsgCreateYAT | PlainMessage<MsgCreateYAT> | undefined): boolean;
}

/**
 * MsgCreateYATResponse is the response type for the Msg/CreateYAT RPC method.
 *
 * @generated from message lorenzo.plan.v1.MsgCreateYATResponse
 */
export declare class MsgCreateYATResponse extends Message<MsgCreateYATResponse> {
  /**
   * contract_address is the address of the yat contract
   *
   * @generated from field: string contract_address = 1;
   */
  contractAddress: string;

  constructor(data?: PartialMessage<MsgCreateYATResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgCreateYATResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateYATResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateYATResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateYATResponse;

  static equals(a: MsgCreateYATResponse | PlainMessage<MsgCreateYATResponse> | undefined, b: MsgCreateYATResponse | PlainMessage<MsgCreateYATResponse> | undefined): boolean;
}

/**
 * MsgSetMinter is the request type for the Msg/SetMinter RPC method.
 *
 * @generated from message lorenzo.plan.v1.MsgSetMinter
 */
export declare class MsgSetMinter extends Message<MsgSetMinter> {
  /**
   * minter is the address of the minter
   *
   * @generated from field: string minter = 1;
   */
  minter: string;

  /**
   * contract_address is the address of the yat contract
   *
   * @generated from field: string contract_address = 2;
   */
  contractAddress: string;

  /**
   * sender is the address of the allowed sender
   *
   * @generated from field: string sender = 3;
   */
  sender: string;

  constructor(data?: PartialMessage<MsgSetMinter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgSetMinter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetMinter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetMinter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetMinter;

  static equals(a: MsgSetMinter | PlainMessage<MsgSetMinter> | undefined, b: MsgSetMinter | PlainMessage<MsgSetMinter> | undefined): boolean;
}

/**
 * MsgSetMinterResponse is the response type for the Msg/SetMinter RPC method.
 *
 * @generated from message lorenzo.plan.v1.MsgSetMinterResponse
 */
export declare class MsgSetMinterResponse extends Message<MsgSetMinterResponse> {
  constructor(data?: PartialMessage<MsgSetMinterResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgSetMinterResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetMinterResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetMinterResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetMinterResponse;

  static equals(a: MsgSetMinterResponse | PlainMessage<MsgSetMinterResponse> | undefined, b: MsgSetMinterResponse | PlainMessage<MsgSetMinterResponse> | undefined): boolean;
}

/**
 * MsgRemoveMinter is the request type for the Msg/RemoveMinter RPC method.
 *
 * @generated from message lorenzo.plan.v1.MsgRemoveMinter
 */
export declare class MsgRemoveMinter extends Message<MsgRemoveMinter> {
  /**
   * minter is the address of the minter
   *
   * @generated from field: string minter = 1;
   */
  minter: string;

  /**
   * contract_address is the address of the yat contract
   *
   * @generated from field: string contract_address = 2;
   */
  contractAddress: string;

  /**
   * sender is the address of the allowed sender
   *
   * @generated from field: string sender = 3;
   */
  sender: string;

  constructor(data?: PartialMessage<MsgRemoveMinter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgRemoveMinter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveMinter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveMinter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveMinter;

  static equals(a: MsgRemoveMinter | PlainMessage<MsgRemoveMinter> | undefined, b: MsgRemoveMinter | PlainMessage<MsgRemoveMinter> | undefined): boolean;
}

/**
 * MsgRemoveMinterResponse is the response type for the Msg/RemoveMinter RPC
 * method.
 *
 * @generated from message lorenzo.plan.v1.MsgRemoveMinterResponse
 */
export declare class MsgRemoveMinterResponse extends Message<MsgRemoveMinterResponse> {
  constructor(data?: PartialMessage<MsgRemoveMinterResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "lorenzo.plan.v1.MsgRemoveMinterResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveMinterResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveMinterResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveMinterResponse;

  static equals(a: MsgRemoveMinterResponse | PlainMessage<MsgRemoveMinterResponse> | undefined, b: MsgRemoveMinterResponse | PlainMessage<MsgRemoveMinterResponse> | undefined): boolean;
}

