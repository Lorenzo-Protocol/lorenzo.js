// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: lorenzo/plan/v1/plan.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export enum PlanStatus {
  Pause = 0,
  Unpause = 1,
  UNRECOGNIZED = -1,
}

export function planStatusFromJSON(object: any): PlanStatus {
  switch (object) {
    case 0:
    case "Pause":
      return PlanStatus.Pause;
    case 1:
    case "Unpause":
      return PlanStatus.Unpause;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlanStatus.UNRECOGNIZED;
  }
}

export function planStatusToJSON(object: PlanStatus): string {
  switch (object) {
    case PlanStatus.Pause:
      return "Pause";
    case PlanStatus.Unpause:
      return "Unpause";
    case PlanStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Plan defines the details of a project */
export interface Plan {
  id: string;
  name: string;
  plan_desc_uri: string;
  agent_id: string;
  plan_start_time: string;
  period_time: string;
  yat_contract_address: string;
  contract_address: string;
  enabled: PlanStatus;
}

function createBasePlan(): Plan {
  return {
    id: "0",
    name: "",
    plan_desc_uri: "",
    agent_id: "0",
    plan_start_time: "0",
    period_time: "0",
    yat_contract_address: "",
    contract_address: "",
    enabled: 0,
  };
}

export const Plan = {
  encode(message: Plan, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "0") {
      writer.uint32(8).uint64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.plan_desc_uri !== "") {
      writer.uint32(26).string(message.plan_desc_uri);
    }
    if (message.agent_id !== "0") {
      writer.uint32(32).uint64(message.agent_id);
    }
    if (message.plan_start_time !== "0") {
      writer.uint32(40).uint64(message.plan_start_time);
    }
    if (message.period_time !== "0") {
      writer.uint32(48).uint64(message.period_time);
    }
    if (message.yat_contract_address !== "") {
      writer.uint32(58).string(message.yat_contract_address);
    }
    if (message.contract_address !== "") {
      writer.uint32(66).string(message.contract_address);
    }
    if (message.enabled !== 0) {
      writer.uint32(72).int32(message.enabled);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Plan {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.plan_desc_uri = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.agent_id = longToString(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.plan_start_time = longToString(reader.uint64() as Long);
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.period_time = longToString(reader.uint64() as Long);
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.yat_contract_address = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.contract_address = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.enabled = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Plan {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      plan_desc_uri: isSet(object.plan_desc_uri) ? globalThis.String(object.plan_desc_uri) : "",
      agent_id: isSet(object.agent_id) ? globalThis.String(object.agent_id) : "0",
      plan_start_time: isSet(object.plan_start_time) ? globalThis.String(object.plan_start_time) : "0",
      period_time: isSet(object.period_time) ? globalThis.String(object.period_time) : "0",
      yat_contract_address: isSet(object.yat_contract_address) ? globalThis.String(object.yat_contract_address) : "",
      contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
      enabled: isSet(object.enabled) ? planStatusFromJSON(object.enabled) : 0,
    };
  },

  toJSON(message: Plan): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.plan_desc_uri !== "") {
      obj.plan_desc_uri = message.plan_desc_uri;
    }
    if (message.agent_id !== "0") {
      obj.agent_id = message.agent_id;
    }
    if (message.plan_start_time !== "0") {
      obj.plan_start_time = message.plan_start_time;
    }
    if (message.period_time !== "0") {
      obj.period_time = message.period_time;
    }
    if (message.yat_contract_address !== "") {
      obj.yat_contract_address = message.yat_contract_address;
    }
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    if (message.enabled !== 0) {
      obj.enabled = planStatusToJSON(message.enabled);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Plan>, I>>(base?: I): Plan {
    return Plan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Plan>, I>>(object: I): Plan {
    const message = createBasePlan();
    message.id = object.id ?? "0";
    message.name = object.name ?? "";
    message.plan_desc_uri = object.plan_desc_uri ?? "";
    message.agent_id = object.agent_id ?? "0";
    message.plan_start_time = object.plan_start_time ?? "0";
    message.period_time = object.period_time ?? "0";
    message.yat_contract_address = object.yat_contract_address ?? "";
    message.contract_address = object.contract_address ?? "";
    message.enabled = object.enabled ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
